{"uid":"fe805ecbe10d494a","name":"test_type_inference[parameters38]","fullName":"tests.unit.processing.test_type_conversion_utils#test_type_inference","historyId":"ee13ea71d9f8b6da90fdc57a340dee54","time":{"start":1744647590052,"stop":1744647590053,"duration":1},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"patch_all","time":{"start":1744647576097,"stop":1744647576097,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"caplog","time":{"start":1744647590052,"stop":1744647590052,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"caplog::0","time":{"start":1744647590053,"stop":1744647590053,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.processing"},{"name":"suite","value":"test_type_conversion_utils"},{"name":"host","value":"94026ed803ac"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.processing.test_type_conversion_utils"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"parameters","value":"{'data': array([-3.4028235e+38,  0.0000000e+00,  3.4028235e+38], dtype=float32), 'expected_encoding_dtype': <class 'numpy.float32'>, 'expected_schema_hint': {'type': 'float32'}, 'logs': None}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":10,"unknown":0,"total":10},"items":[{"uid":"81a9f7b82e65d512","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/24036//#testresult/81a9f7b82e65d512","status":"passed","time":{"start":1744646979573,"stop":1744646979574,"duration":1}},{"uid":"ccab7b31a782960a","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/24034//#testresult/ccab7b31a782960a","status":"passed","time":{"start":1744645891036,"stop":1744645891037,"duration":1}},{"uid":"572997952f068ccf","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/24033//#testresult/572997952f068ccf","status":"passed","time":{"start":1744643892472,"stop":1744643892472,"duration":0}},{"uid":"688c7b1e7ded02","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/24023//#testresult/688c7b1e7ded02","status":"passed","time":{"start":1744637601689,"stop":1744637601689,"duration":0}},{"uid":"92a86786095ec6ae","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/24017//#testresult/92a86786095ec6ae","status":"passed","time":{"start":1744407043614,"stop":1744407043614,"duration":0}},{"uid":"a14b1ff667c5e7a8","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/24016//#testresult/a14b1ff667c5e7a8","status":"passed","time":{"start":1744406937175,"stop":1744406937176,"duration":1}},{"uid":"d1140af41b18a822","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/24015//#testresult/d1140af41b18a822","status":"passed","time":{"start":1744404330107,"stop":1744404330107,"duration":0}},{"uid":"258f7d109969e3f9","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/24012//#testresult/258f7d109969e3f9","status":"passed","time":{"start":1744402200185,"stop":1744402200185,"duration":0}},{"uid":"6a05eee21f04de2f","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/24009//#testresult/6a05eee21f04de2f","status":"passed","time":{"start":1744400192583,"stop":1744400192584,"duration":1}}]},"tags":[]},"source":"fe805ecbe10d494a.json","parameterValues":["{'data': array([-3.4028235e+38,  0.0000000e+00,  3.4028235e+38], dtype=float32), 'expected_encoding_dtype': <class 'numpy.float32'>, 'expected_schema_hint': {'type': 'float32'}, 'logs': None}"]}