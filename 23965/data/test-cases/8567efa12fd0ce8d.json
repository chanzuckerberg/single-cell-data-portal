{"uid":"8567efa12fd0ce8d","name":"test_type_inference[parameters42]","fullName":"tests.unit.processing.test_type_conversion_utils#test_type_inference","historyId":"23d33433afdae1968213e85c66998b1d","time":{"start":1744328197668,"stop":1744328197669,"duration":1},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"patch_all","time":{"start":1744328187923,"stop":1744328187923,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"caplog","time":{"start":1744328197668,"stop":1744328197668,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"passed","steps":[],"attachments":[{"uid":"80b57680d4c1898d","name":"log","source":"80b57680d4c1898d.txt","type":"text/plain","size":341},{"uid":"d9e7953b28c6b895","name":"stdout","source":"d9e7953b28c6b895.txt","type":"text/plain","size":831}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"caplog::0","time":{"start":1744328197670,"stop":1744328197670,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.processing"},{"name":"suite","value":"test_type_conversion_utils"},{"name":"host","value":"66c4f78701a1"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.processing.test_type_conversion_utils"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"parameters","value":"{'data': Index([-129.0, -128.0, -127.0, -126.0, -125.0, -124.0, -123.0, -122.0, -121.0,\n       -120.0,\n       ...\n        990.0,  991.0,  992.0,  993.0,  994.0,  995.0,  996.0,  997.0,  998.0,\n        999.0],\n      dtype='float64', length=1129), 'expected_encoding_dtype': <class 'numpy.float32'>, 'expected_schema_hint': {'type': 'float32'}, 'logs': {'level': 30, 'output': 'may lose precision'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":7,"unknown":0,"total":7},"items":[{"uid":"293607d62a31ce4a","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23964//#testresult/293607d62a31ce4a","status":"passed","time":{"start":1744326572608,"stop":1744326572609,"duration":1}},{"uid":"a6225648e7e3445a","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23961//#testresult/a6225648e7e3445a","status":"passed","time":{"start":1744324473234,"stop":1744324473235,"duration":1}},{"uid":"140ac8cef9bc6186","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23954//#testresult/140ac8cef9bc6186","status":"passed","time":{"start":1744324189407,"stop":1744324189408,"duration":1}},{"uid":"9a87b1cb129fd98b","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23951//#testresult/9a87b1cb129fd98b","status":"passed","time":{"start":1744322847489,"stop":1744322847489,"duration":0}},{"uid":"8a2cf3c740b3b09b","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23950//#testresult/8a2cf3c740b3b09b","status":"passed","time":{"start":1744317734445,"stop":1744317734446,"duration":1}},{"uid":"370fc41b5e14a6e2","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23949//#testresult/370fc41b5e14a6e2","status":"passed","time":{"start":1744316549264,"stop":1744316549265,"duration":1}}]},"tags":[]},"source":"8567efa12fd0ce8d.json","parameterValues":["{'data': Index([-129.0, -128.0, -127.0, -126.0, -125.0, -124.0, -123.0, -122.0, -121.0,\n       -120.0,\n       ...\n        990.0,  991.0,  992.0,  993.0,  994.0,  995.0,  996.0,  997.0,  998.0,\n        999.0],\n      dtype='float64', length=1129), 'expected_encoding_dtype': <class 'numpy.float32'>, 'expected_schema_hint': {'type': 'float32'}, 'logs': {'level': 30, 'output': 'may lose precision'}}"]}