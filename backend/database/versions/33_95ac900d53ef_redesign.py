"""

Revision ID: 33_95ac900d53ef
Revises: 32_c27083d1a76d_schema
Create Date: 2023-01-03 15:11:24.868061

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "95ac900d53ef"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "Collection",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("version_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("originally_published_at", sa.DateTime(), nullable=True),
        sa.Column("tombstoned", sa.BOOLEAN(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        schema="persistence_schema",
    )
    op.create_table(
        "CollectionVersion",
        sa.Column("version_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("collection_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("metadata", postgresql.JSON(astext_type=sa.Text()), nullable=True),
        sa.Column("owner", sa.String(), nullable=True),
        sa.Column("curator_name", sa.String(), nullable=True),
        sa.Column("publisher_metadata", postgresql.JSON(astext_type=sa.Text()), nullable=True),
        sa.Column("published_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("datasets", postgresql.ARRAY(postgresql.UUID(as_uuid=True)), nullable=True),
        sa.PrimaryKeyConstraint("version_id"),
        schema="persistence_schema",
    )
    op.create_table(
        "Dataset",
        sa.Column("dataset_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("dataset_version_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("published_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("dataset_id"),
        schema="persistence_schema",
    )
    op.create_table(
        "DatasetArtifact",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("type", sa.Enum("RAW_H5AD", "H5AD", "RDS", "CXG", name="datasetartifacttype"), nullable=True),
        sa.Column("uri", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        schema="persistence_schema",
    )
    op.create_table(
        "DatasetVersion",
        sa.Column("version_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("dataset_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("collection_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("metadata", postgresql.JSON(astext_type=sa.Text()), nullable=True),
        sa.Column("artifacts", postgresql.ARRAY(postgresql.UUID(as_uuid=True)), nullable=True),
        sa.Column("status", postgresql.JSON(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["persistence_schema.Dataset.dataset_id"],
        ),
        sa.PrimaryKeyConstraint("version_id"),
        schema="persistence_schema",
    )
    op.drop_index("ix_child_parent_id", table_name="child")
    op.drop_table("child")
    op.drop_table("project")
    op.drop_table("project_link")
    op.drop_index("ix_dataset_explorer_url", table_name="dataset")
    op.drop_table("dataset")
    op.drop_index("ix_associate_property_owner_child_id", table_name="associate_property_owner")
    op.drop_index("ix_associate_property_owner_property_id", table_name="associate_property_owner")
    op.drop_table("associate_property_owner")
    op.drop_table("dataset_processing_status")
    op.drop_table("parent")
    op.drop_table("geneset")
    op.drop_index("ix_property_parent_id", table_name="property")
    op.drop_table("property")
    op.drop_table("dataset_artifact")
    op.drop_index("ix_geneset_dataset_link_dataset_id", table_name="geneset_dataset_link")
    op.drop_index("ix_geneset_dataset_link_geneset_id", table_name="geneset_dataset_link")
    op.drop_table("geneset_dataset_link")
    op.drop_table("test")
    # ### end Alembic commands ###


def downgrade():
    pass
