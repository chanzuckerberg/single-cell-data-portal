openapi: 3.0.0
info:
  version: "1.0.0"
  title: Chan Zuckerberg Initiative CELLxGENE Discover API
  termsOfService: https://cellxgene.cziscience.com/tos
  contact:
    name: API Support
    email: cellxgene@chanzuckerberg.com
  description: |
    ## For Examples
    * [Python Notebooks](https://github.com/chanzuckerberg/single-cell-curation/tree/main/notebooks/curation_api/python_raw)
    * [R Notebooks](https://github.com/chanzuckerberg/single-cell-curation/tree/main/notebooks/curation_api/R)
servers:
  - description: Production environment
    url: https://api.cellxgene.cziscience.com/
  - description: Development environment
    url: https://api.cellxgene.dev.single-cell.czi.technology
  - description: Staging environment
    url: https://api.cellxgene.staging.single-cell.czi.technology
paths:
  /v1/auth/token:
    post:
      summary: Generate an access token
      tags:
        - authentication
      description: |
        Returns a bearer access token that must be passed in an Authentication header to requests that
        require authorization such as creating a new Collection.
      operationId: backend.corpora.lambdas.api.v1.curation.auth.token.post
      parameters:
        - in: header
          name: x-api-key
          schema:
            type: string
            example: "<YOUR-CURATOR-API-KEY>"
          required: true
          description: Your curation API key.```
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
        "401":
          $ref: "#/components/responses/401"

  /v1/collections:
    get:
      summary: List Collections' metadata.
      description: |
        For each Collection in the list, the Datasets for that Collection include a subset of Dataset metadata as a 
        preview. To retrieve full Dataset metadata for a specific Collection, GET /v1/collections/{collection_id} must 
        be used.

        The default `visibility` is PUBLIC. When visibility is PUBLIC, then a list of all public Collections is 
        returned. 

        When the visibility parameter is set to PRIVATE, a list of all private Collections or private revisions of 
        public Collections that the user is authorized to access is returned. An access token MUST be set in the request
        header as: `Authentication: bearer <access_token>`

        If a Collection in the list is a private revision of a public Collection, then it is annotated with 
        `revision_of`.

        * Optional: provide your access token in the request header as `Authentication: bearer <access_token>`.
      operationId: backend.corpora.lambdas.api.v1.curation.collections.actions.get
      security:
        - curatorAccessLenient: []
        - {}
      tags:
        - collection
      parameters:
        - description: |
            The visibility of the Collections to query for (and its constituent Datasets).

            | visibility | description | Authorization Required |
            | ---------- | ----------- | -------------- |
            | PUBLIC   | All public Collections are returned. | No |
            | PRIVATE  | All private Collections that the user is authorized to access are returned. If a Collection in the list is a private Revision of a public Collection, then it is annotated with revision_of. | Yes |
          in: query
          name: visibility
          required: false
          schema:
            $ref: "#/components/schemas/visibility"
        - name: curator
          description: |
            Return Collections owned by the specified curator. The use of this parameter is limited to curators 
            with permission to query all Collections.
          in: query
          required: false
          schema:
            type: string
          example: "John Smith"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/collection_list"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
    post:
      summary: Create a Collection
      description: >
        Create a new private Collection

        * Required: provide your access token in the request header as `Authentication: bearer <access_token>`.
      operationId: backend.corpora.lambdas.api.v1.curation.collections.actions.post
      tags:
        - collection
      security:
        - curatorAccess: []
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              $ref: "#/components/schemas/collection_form_metadata"
              required:
                - name
                - description
                - contact_name
                - contact_email
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  collection_id:
                    $ref: "#/components/schemas/collection_id"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"

  /v1/collections/{collection_id}:
    get:
      summary: Fetch a Collection with Datasets
      description: >
        Fetch full metadata for the Collection and its Datasets.

        * Optional: provide your access token in the request header as `Authentication: bearer <access_token>`.
      operationId: backend.corpora.lambdas.api.v1.curation.collections.collection_id.actions.get
      security:
        - curatorAccessLenient: []
        - {}
      tags:
        - collection
      parameters:
        - $ref: "#/components/parameters/path_collection_id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/collection_get"
        "403":
          $ref: "#/components/responses/403"
    patch:
      summary: Update a Collection's metadata.
      description: |
        Update a private Collection or a Revision. If any Collection metadata fields are included in the body of the
        request, these fields will be updated for the specified Collection. If links are included, they will fully
        replace all existing links. CELLxGENE Discover queries **Crossref** (link to their site) for the publication 
        metadata of the DOI such as the list of authors. If the DOI has not been submitted to Crossref by its 
        publisher, then the request returns a 400 (BAD REQUEST).

        * Optional: provide your access token in the request header as `Authentication: bearer <access_token>`.
      operationId: backend.corpora.lambdas.api.v1.curation.collections.collection_id.actions.patch
      security:
        - curatorAccess: []
      tags:
        - collection
      parameters:
        - $ref: "#/components/parameters/path_collection_id"
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              $ref: "#/components/schemas/collection_form_metadata"
            examples:
              update_name:
                summary: Update the name
                value:
                  name: "New Collection name"
              update_description:
                summary: Update the description
                value:
                  description: "New Collection description"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/collection_form_metadata"
                  - type: object
                    properties:
                      publisher_metadata:
                        $ref: "#/components/schemas/publisher_metadata"
                required:
                  - doi
                  - links
                  - name
                  - description
                  - contact_name
                  - contact_email
                  - publisher_metadata
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "405":
          $ref: "#/components/responses/405"
    delete:
      summary: Delete a private Collection.
      description: |
        Delete a private Collection or cancel a Revision.

        * Required: provide your access token in the request header as `Authentication: bearer <access_token>`.
      operationId: backend.corpora.lambdas.api.v1.curation.collections.collection_id.actions.delete
      security:
        - curatorAccess: []
      tags:
        - collection
      parameters:
        - $ref: "#/components/parameters/path_collection_id"
      responses:
        "204":
          $ref: "#/components/responses/204"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "405":
          $ref: "#/components/responses/405"

  /v1/collections/{collection_id}/revision:
    post:
      summary: Start a Revision of a published Collection
      description: |
        This starts a Revision of a published Collection. A Revision is a private Collection that is a copy of a
        published Collection. When published, a Revision replaces the original published Collection in-place. Only one
        ongoing Revision may exist per published Collection at any given time.

        All methods of updating or adding Datasets and metadata to a Revision work the same as for a private Collection.

        * Required: provide your access token in the request header as `Authentication: bearer <access_token>`.
      operationId: backend.corpora.lambdas.api.v1.curation.collections.collection_id.revision.post_collection_revision
      security:
        - curatorAccess: []
      tags:
        - collection
      parameters:
        - $ref: "#/components/parameters/path_collection_id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  revision_id:
                    $ref: "#/components/schemas/collection_id"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"

  /v1/collections/{collection_id}/datasets:
    delete:
      summary: Delete a Dataset or cancel processing for a Dataset in a private Collection or Revision.
      description: |
        Delete a Dataset or cancel processing for a Dataset. The **Collection_id** MUST reference either a private Collection OR a 
        Revision. MUST indicate the Dataset by providing *one* of either the `curator_tag` (non-null) OR the `dataset_id`
        parameters.

        If the Dataset is being processed, then this endpoint will cancel processing and delete the Dataset. While 
        the cancellation process is occurring, the Dataset may still appear as part of the Collection for a few minutes, but will eventually be removed.

        * Required: provide your access token in the request header as `Authentication: bearer <access_token>`.
      operationId: backend.corpora.lambdas.api.v1.curation.collections.collection_id.datasets.actions.delete
      tags:
        - collection
      security:
        - curatorAccess: []
      parameters:
        - $ref: "#/components/parameters/path_collection_id"
        - $ref: "#/components/parameters/query_curator_tag"
        - $ref: "#/components/parameters/query_dataset_id"
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                type: string
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "405":
          $ref: "#/components/responses/405"
    get:
      summary: Fetch Dataset metadata from a Collection.
      description: |
        Fetch Dataset metadata from a Collection. If a `dataset_id` or a `curator_tag` is provided as a query,
        the associated Dataset metadata is returned.
      operationId: backend.corpora.lambdas.api.v1.curation.collections.collection_id.datasets.actions.get
      tags:
        - collection
      parameters:
        - $ref: "#/components/parameters/path_collection_id"
        - $ref: "#/components/parameters/query_curator_tag"
        - $ref: "#/components/parameters/query_dataset_id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/dataset"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
    patch:
      summary: Update a Dataset's curator tag.
      tags:
        - collection
      description: |
        Update a Dataset's curator-provided tag. The Dataset MUST belong to a either a private Collection OR a Revision. 
        MUST indicate the Dataset by providing *one* of either the `curator_tag` (non-null) OR the `dataset_id` 
        parameters.

        * Required: provide your access token in the request header as `Authentication: bearer <access_token>`.
      security:
        - curatorAccess: []
      operationId: backend.corpora.lambdas.api.v1.curation.collections.collection_id.datasets.actions.patch
      parameters:
        - $ref: "#/components/parameters/path_collection_id"
        - $ref: "#/components/parameters/query_curator_tag"
        - $ref: "#/components/parameters/query_dataset_id"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                curator_tag:
                  $ref: "#/components/schemas/curator_tag"
            example:
              curator_tag: "new/curator_tag"
      responses:
        "204":
          $ref: "#/components/responses/204"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"

  /v1/collections/{collection_id}/datasets/upload-link:
    put:
      summary: Upload a Dataset by providing a link
      description: |
        Upload a Dataset. The Dataset will be uploaded from the provided `link` which MUST either be a presigned AWS S3 
        URL or Dropbox shared file URL. MAY include a `curator_tag` in the request body; if an existing Dataset has this 
        tag, the existing Dataset SHALL be replaced, otherwise a new Dataset will be added. MAY include the `dataset_id` 
        of an existing Dataset, in which case the existing Dataset SHALL be replaced and the `curator_tag` field
        will be ignored.

        * Required: provide your access token in the request header as `Authentication: bearer <access_token>`.
      operationId: backend.corpora.lambdas.api.v1.curation.collections.collection_id.datasets.upload_link.put
      tags:
        - collection
      security:
        - curatorAccess: []
      parameters:
        - $ref: "#/components/parameters/path_collection_id"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                curator_tag:
                  $ref: "#/components/schemas/curator_tag"
                id:
                  $ref: "#/components/schemas/dataset_id"
                link:
                  description: |
                    A user-provided link to the Dataset source file. The Dataset will be uploaded from the provided 
                    `link` which MUST either be a presigned AWS S3  or Dropbox shared file URL.
                  type: string
            examples:
              tag:
                summary: Using the tag
                value:
                  curator_tag: "<new_or_existing_tag>"
                  link: "<download_link_for_data_source_file>"
              id:
                summary: Using the Dataset uuid
                value:
                  id: "<existing_dataset_id>"
                  link: "<download_link_for_data_source_file>"
      responses:
        "202":
          $ref: "#/components/responses/202"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "405":
          $ref: "#/components/responses/405"
        "404":
          $ref: "#/components/responses/404"
        "413":
          $ref: "#/components/responses/413"

  /v1/collections/{collection_id}/datasets/s3-upload-credentials:
    get:
      summary: Get credentials for uploading local files
      tags:
        - collection
      description: |
        Retrieve temporary AWS credentials for uploading Dataset source files to S3 to create
        or update Datasets for the specified Collection.

        * Uploads to <root_bucket> MUST take the form of `s3://<root_bucket>/<collection_id>/<curator_tag>`.

        * `<collection_id>` MUST NOT be a published Collection. Only uploads to private Collections
        (unpublished OR ongoing Revision) will be processed.

        * If there is no Dataset with tag `<curator_tag>` in `<collection_id>`, a new Dataset SHALL be added.

        * If there is an existing Dataset with tag `<curator_tag>` in `<collection_id>`, the existing Dataset
        SHALL be replaced.


        The response contains the credentials required for uploading to our AWS S3 bucket:

        * access_key

        * secret_access_key

        * session_token


        To upload the files to S3, use the Python boto3 package. Once a file is successfully uploaded, it wil be
        processed and added to the Collection (specified in the S3 key path) with no further user action required.
        Use `GET /curation/collections/{collection_id}/datasets/` with `curator_tag` or `id` query parameter  to check 
        on the processing status for a given Dataset.

        A Dataset uploaded directly to S3 will appear in the Collection only once the Dataset has started
        processing.

        * Required: provide your access token in the request header as `Authentication: bearer <access_token>`.
      security:
        - curatorAccess: []
      operationId: backend.corpora.lambdas.api.v1.curation.collections.collection_id.datasets.upload_s3.get
      parameters:
        - $ref: "#/components/parameters/path_collection_id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Bucket:
                    description: The AWS S3 bucket to upload to.
                    type: string
                  credentials:
                    type: object
                    properties:
                      AccessKeyId:
                        type: string
                      SecretAccessKey:
                        type: string
                      SessionToken:
                        type: string
                  UploadKeyPrefix:
                    description: |
                      Use this as a prefix to the S3 Key used to upload the file to S3. This will help ensure that it is
                      processed correctly.
                    type: string
        "401":
          $ref: "#/components/responses/401"

  /v1/collections/{collection_id}/datasets/assets:
    get:
      summary: Retrieve links for downloading a Dataset
      tags:
        - collection
      description: |
        Generate Presigned S3 URLs to download the files associated with the Dataset. MUST include *one* of the `curator_tag`
        and `dataset_id` parameters. Pre-signed S3 URLs have a life span of up to 1 hour. Therefore,
        generate a presigned URL immediately before each download to ensure it is current.
      operationId: backend.corpora.lambdas.api.v1.curation.collections.collection_id.assets.get
      parameters:
        - $ref: "#/components/parameters/path_collection_id"
        - $ref: "#/components/parameters/query_curator_tag"
        - $ref: "#/components/parameters/query_dataset_id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset_response"
        "202":
          description: Unable to retrieve one or more asset response fields.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset_response"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"

components:
  schemas:
    asset_response:
      properties:
        assets:
          items:
            properties:
              filename:
                $ref: "#/components/schemas/asset_filename"
              filesize:
                description: the size of the file in bytes.
                type: number
              filetype:
                $ref: "#/components/schemas/asset_filetype"
              presigned_url:
                description: A URL to download this asset.
                type: string
            type: object
          type: array
        curator_tag:
          $ref: "#/components/schemas/curator_tag"
          nullable: true
        dataset_id:
          $ref: "#/components/schemas/dataset_id"
      type: object
    asset_filetype:
      enum:
        - H5AD
        - RDS
      type: string
      description: the file type of the asset.
    asset_filename:
      type: string
      description: the file name of the asset.
    batch_condition:
      description: |
        These keys define the batches that a normalization or integration algorithm should be aware of.
        [batch condition schema](https://github.com/chanzuckerberg/single-cell-curation/blob/main/schema/3.0.0/schema.md#batch_condition)

      type: array
      items:
        type: string
      nullable: true
      example: ["patient", "seqBatch"]
    collection_list:
      description: Collection metadata
      properties:
        collection_url:
          description: The CELLxGENE Discover URL for the Collection.
          type: string
        contact_email:
          $ref: "#/components/schemas/contact_email"
        contact_name:
          $ref: "#/components/schemas/contact_name"
        created_at:
          type: string
        curator_name:
          $ref: "#/components/schemas/curator_name"
        datasets:
          type: array
          description: A preview of the metadata for each Dataset in the Collection.
          items:
            $ref: "#/components/schemas/dataset_preview"
        description:
          $ref: "#/components/schemas/collection_description"
        doi:
          $ref: "#/components/schemas/doi"
        id:
          $ref: "#/components/schemas/collection_id"
        links:
          $ref: "#/components/schemas/links"
        name:
          $ref: "#/components/schemas/collection_name"
        processing_status:
          $ref: "#/components/schemas/processing_status_collection"
        published_at:
          $ref: "#/components/schemas/published_at"
        publisher_metadata:
          $ref: "#/components/schemas/publisher_metadata"
        revised_at:
          $ref: "#/components/schemas/collection_revised_at"
        revising_in:
          $ref: "#/components/schemas/collection_revising_in"
        revision_of:
          $ref: "#/components/schemas/collection_revision_of"
        visibility:
          $ref: "#/components/schemas/visibility"
      type: object
    collection_url:
      description: The CELLxGENE Discover URL for the Collection.
      type: string
    contact_email:
      description: The email of contact person for the Collection. Example email john.smith@email.com
      type: string
    contact_name:
      description: The name of the primary contact for the Collection
      type: string
    created_at:
      description: A timestamp of when the resource was created.
      type: string
    curator_name:
      description: The name of the curator for the Collection.
      nullable: true
      type: string
    collection_name:
      description: The name of the Collection.
      nullable: true
      type: string
    published_at:
      description: A timestamp of when the Collection was first published.
      nullable: true
      type: string
    collection_revised_at:
      description: A timestamp indicating the last time a Revision for this Collection was published.
      nullable: true
      type: string
    dataset_revised_at:
      description: A timestamp indicating the last time a Revision for this Dataset was published.
      nullable: true
      type: string
    collection_revising_in:
      type: string
      description: >
        If there is a private Revision for a public Collection, then `revising_in` is set to the id of 
        the private Revision in the metadata of the public Collection. The value is `None` if the user is not 
        authorized or no private Revision exists.
      nullable: true
    collection_revision_of:
      description: |
        If a private Collection is a Revision of a public Collection, then `revision_of` is set to the id of the 
        public Collection in the metadata of the private Collection. The value is `None` if no private Revision 
        exists.
      nullable: true
      type: string
    collection_tombstone:
      description: If this is True, then the Collection has been deleted from CELLxGENE Discover.
      type: boolean
    collection_description:
      description: A description of the Collection.
      type: string
    collection_get:
      description: Collection metadata
      properties:
        collection_url:
          $ref: "#/components/schemas/collection_url"
        contact_email:
          $ref: "#/components/schemas/contact_email"
        contact_name:
          $ref: "#/components/schemas/contact_name"
        created_at:
          $ref: "#/components/schemas/created_at"
        curator_name:
          $ref: "#/components/schemas/curator_name"
        datasets:
          type: array
          description: A list of Dataset metadata associated with the Collection
          items:
            $ref: "#/components/schemas/dataset"
        description:
          $ref: "#/components/schemas/collection_description"
        doi:
          $ref: "#/components/schemas/doi"
        id:
          $ref: "#/components/schemas/collection_id"
        links:
          $ref: "#/components/schemas/links"
        name:
          $ref: "#/components/schemas/collection_name"
        processing_status:
          $ref: "#/components/schemas/processing_status_collection"
        published_at:
          $ref: "#/components/schemas/published_at"
        publisher_metadata:
          $ref: "#/components/schemas/publisher_metadata"
        revised_at:
          $ref: "#/components/schemas/collection_revised_at"
        revising_in:
          $ref: "#/components/schemas/collection_revising_in"
        revision_of:
          $ref: "#/components/schemas/collection_revision_of"
        visibility:
          $ref: "#/components/schemas/visibility"
      type: object
    collection_form_metadata:
      properties:
        contact_email:
          $ref: "#/components/schemas/contact_email"
        contact_name:
          $ref: "#/components/schemas/contact_name"
        description:
          $ref: "#/components/schemas/collection_description"
        doi:
          $ref: "#/components/schemas/doi"
        links:
          $ref: "#/components/schemas/links"
        name:
          $ref: "#/components/schemas/collection_name"
      type: object
    collection_id:
      description: A unique identifier of a Collection.
      example: fedcba98-7654-3210-fedc-ba9876543210
      type: string
    curator_tag:
      description: |
        A curator-provided tag for a Dataset that serves as a unique identifier *within a Collection*. A timestamp or
        the original file name can be used as the `curator_tag`. The curator tag **cannot** be in UUID format.
      example: an/example/curator_tag
      type: string
    dataset:
      properties:
        assay:
          $ref: "#/components/schemas/dataset_assay"
        batch_condition:
          $ref: "#/components/schemas/batch_condition"
        cell_count:
          description: The number of cells in the Dataset.
          nullable: true
          type: integer
        cell_type:
          description: |
            [cell type label](https://github.com/chanzuckerberg/single-cell-curation/blob/main/schema/3.0.0/schema.md#cell_type)
          default: []
          items:
            $ref: "#/components/schemas/ontology_element"
          type: array
        curator_tag:
          $ref: "#/components/schemas/curator_tag"
          nullable: true
        dataset_assets:
          description: |
            The assets associated with the Dataset. Links to download the files can be generated using
            *GET /v1/collections/{collection_id}/datasets/assets*
          items:
            properties:
              filename:
                $ref: "#/components/schemas/asset_filename"
              filetype:
                $ref: "#/components/schemas/asset_filetype"
            type: object
          type: array
        development_stage:
          description: |
            [development stage label](https://github.com/chanzuckerberg/single-cell-curation/blob/main/schema/3.0.0/schema.md#development_stage)
          default: []
          items:
            $ref: "#/components/schemas/ontology_element"
          type: array
          nullable: true
        disease:
          $ref: "#/components/schemas/dataset_disease"
        ethnicity:
          description: |
            [self reported ethnicity label](https://github.com/chanzuckerberg/single-cell-curation/blob/main/schema/3.0.0/schema.md#self_reported_ethnicity)
          default: []
          items:
            $ref: "#/components/schemas/ontology_element"
          type: array
        explorer_url:
          $ref: "#/components/schemas/explorer_url"
        id:
          $ref: "#/components/schemas/dataset_id"
        is_primary_data:
          $ref: "#/components/schemas/is_primary_data"
        mean_genes_per_cell:
          nullable: true
          type: number
        title:
          description: |
            [title](https://github.com/chanzuckerberg/single-cell-curation/blob/main/schema/3.0.0/schema.md#title)
          nullable: true
          type: string
        organism:
          $ref: "#/components/schemas/dataset_organism"
        processing_status:
          $ref: "#/components/schemas/processing_status_dataset"
        processing_status_detail:
          type: string
          description: |
            When `processing_status` is set to VALIDATION_FAILURE, further details about the validation failures for 
            the dataset can be found in `processing_status_detail`.
          nullable: true
        revised_at:
          $ref: "#/components/schemas/dataset_revised_at"
        revision:
          description: The number of times the Dataset has been revised.
          nullable: true
          type: integer
        schema_version:
          description: |
            The version of the CELLxGENE schema with which the Dataset complies to. [Schemas](https://github.com/chanzuckerberg/single-cell-curation/tree/main/schema)
          nullable: true
          type: string
        sex:
          description: |
            [sex label](https://github.com/chanzuckerberg/single-cell-curation/blob/main/schema/3.0.0/schema.md#sex)
          default: []
          items:
            $ref: "#/components/schemas/ontology_element"
          type: array
        tissue:
          $ref: "#/components/schemas/dataset_tissue"
        x_approximate_distribution:
          $ref: "#/components/schemas/distribution"
      type: object
    dataset_assay:
      description: |
        [assay label](https://github.com/chanzuckerberg/single-cell-curation/blob/main/schema/3.0.0/schema.md#assay)
      default: []
      items:
        $ref: "#/components/schemas/ontology_element"
      type: array
    dataset_disease:
      description: |
        [disease label](https://github.com/chanzuckerberg/single-cell-curation/blob/main/schema/3.0.0/schema.md#disease)
      default: []
      items:
        $ref: "#/components/schemas/ontology_element"
      type: array
    dataset_organism:
      description: |
        [organism label](https://github.com/chanzuckerberg/single-cell-curation/blob/main/schema/3.0.0/schema.md#organism)
      default: []
      items:
        $ref: "#/components/schemas/ontology_element"
      type: array
    dataset_tissue:
      description: |
        [tissue label](https://github.com/chanzuckerberg/single-cell-curation/blob/main/schema/3.0.0/schema.md#tissue)
      default: []
      items:
        $ref: "#/components/schemas/ontology_element"
      type: array
    dataset_tombstone:
      description: When True, this Dataset was withdrawn from the Data Portal at the request of its submitter.
      type: boolean
    dataset_id:
      description: A unique identifier of a Dataset.
      example: 01234567-89ab-cdef-0123-456789abcdef
      type: string
    dataset_preview:
      properties:
        assay:
          $ref: "#/components/schemas/dataset_assay"
        curator_tag:
          $ref: "#/components/schemas/curator_tag"
          nullable: true
        disease:
          $ref: "#/components/schemas/dataset_disease"
        id:
          $ref: "#/components/schemas/dataset_id"
        organism:
          $ref: "#/components/schemas/dataset_organism"
        tissue:
          $ref: "#/components/schemas/dataset_tissue"
      type: object
    distribution:
      description:
        CELLxGENE Discover runs a heuristic to detect the approximate distribution
        of the data in X so that it can accurately calculate statistical properties
        of the data. This field enables the curator to override this heuristic and
        specify the data distribution explicitly. [x_approximate_distribution](https://github.com/chanzuckerberg/single-cell-curation/blob/main/schema/3.0.0/schema.md#x_approximate_distribution)
      enum:
        - COUNT
        - NORMAL
      type: string
      nullable: true
    doi:
      description: Document Object Identifier (DOI). Specifically, only the _CURIE reference_.
      type: string
      nullable: true
      example: "10.1093/ajae/aaq063"
    explorer_url:
      description: |
        The URL at which a given Dataset may be explored using CELLxGENE Explorer.
      nullable: true
      type: string
    is_primary_data:
      description: |
        [is_primary_data boolean](https://github.com/chanzuckerberg/single-cell-curation/blob/main/schema/3.0.0/schema.md#is_primary_data)

        Describes whether cellular observations for this Dataset are all
        canonical (True), all non-canonical (False), or contain a mixture (True, False).
      items:
        type: boolean
      type: array
    links:
      items:
        additionalProperties: false
        description: A URL that links associated resources with the Collection.
        properties:
          link_name:
            description: A brief description of the URL.
            nullable: true
            type: string
          link_type:
            description: |
              If the link_type is DOI, then the `link_url` must be a valid DOI link; the `link_name` will be ignored 
              or overwritten if provided. For example, https://doi.org/00.0000/science.abc1234 is a valid DOI 
              `link_url`. All other links types can be any valid URL.
            enum:
              - PROTOCOL
              - RAW_DATA
              - LAB_WEBSITE
              - OTHER
              - DATA_SOURCE
            nullable: true
            type: string
          link_url:
            description: The URL of the link.
            nullable: true
            type: string
        required:
          - link_url
          - link_type
        type: object
      type: array
    ontology_element:
      properties:
        label:
          type: string
        ontology_term_id:
          type: string
      type: object
    problem:
      description: Error message container for HTTP APIs.
      properties:
        detail:
          type: string
        title:
          type: string
        type:
          type: string
      type: object
    processing_status_collection:
      description: |
        Processing status for a Collection
        | `processing_status` | Description |
        | ------------------- | ----------- |
        | `"FAILURE"` | one or more Datasets ran into an error during processing. More information can be found in the Dataset processing_status logs. |
        | `"PENDING"` | one or more Datasets are still being processed. |
        | `"SUCCESS"` | all Datasets have been processed successfully. |
        | `null` | the Collection has no Datasets. |
      enum:
        - FAILURE
        - PENDING
        - SUCCESS
      nullable: true
      type: string
    processing_status_dataset:
      description: |
        Processing status for a Dataset
        | `processing_status` | Description |
        | ------------------- | ----------- |
        | `"PENDING"` | the Dataset has is still being processed. |
        | `"SUCCESS"` | the Dataset has successfully been processed. |
        | `"VALIDATION_FAILURE"` | An error occured during validation. See `processing_status_detail`|
        | `"PIPELINE_FAILURE"`| An error occured during processing. |
      enum:
        - PENDING
        - SUCCESS
        - VALIDATION_FAILURE
        - PIPELINE_FAILURE
      nullable: true
      type: string
    publisher_metadata:
      nullable: true
      properties:
        authors:
          items:
            properties:
              family:
                type: string
              given:
                type: string
              name:
                type: string
            type: object
          type: array
        is_preprint:
          type: boolean
        journal:
          type: string
        published_day:
          type: number
        published_month:
          type: number
        published_year:
          type: number
      type: object
    visibility:
      default: PUBLIC
      description: |
        The visibility of the Collection.

        | visibility | description |
        | ---------- | ----------- | 
        | PUBLIC   | The Collection is published and accessible to all users of CELLxGENE Discover |
        | PRIVATE  | The Collection is in private review, either as a new Collection that has not been published or a Revision of a previously published Collection. |
      enum:
        - PUBLIC
        - PRIVATE
      type: string
  parameters:
    path_collection_id:
      description: The uuid of a Collection.
      in: path
      name: collection_id
      required: true
      schema:
        $ref: "#/components/schemas/collection_id"
    query_curator_tag:
      description: |
        A curator-provided tag **MUST** be unique within a given Collection. **MAY** be used to uniquely identify a 
        Dataset when using the Curator API. **SHALL** default to null for Datasets created using the CELLxGENE Discover UI.
      in: query
      name: curator_tag
      required: false
      schema:
        $ref: "#/components/schemas/curator_tag"
    query_dataset_id:
      description: The uuid of the Dataset.
      in: query
      name: dataset_id
      required: false
      schema:
        $ref: "#/components/schemas/dataset_id"
  responses:
    "200":
      description: OK
    "201":
      description: Created
    "202":
      description: Accepted
    "204":
      description: No content
    "400":
      content:
        application/problem+json:
          schema:
            type: object
            properties:
              detail:
                type: string
              invalid_parameters:
                nullable: true
                type: array
                items:
                  type: object
                  properties:
                    name:
                      description: the errant parameter
                      type: string
                    reason:
                      description: the specific problem with the parameter
                      type: string
                    value:
                      description: the errant value
                      type: string
              title:
                type: string
              type:
                type: string
      description: Invalid or missing parameter
    "401":
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problem"
      description: Failed to authenticate
    "403":
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problem"
      description: Forbidden
    "404":
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problem"
      description: Resource not found
    "405":
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problem"
      description: Method not allowed
    "409":
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problem"
      description: File conflict
    "413":
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problem"
      description: Exceed File Size Limit
  securitySchemes:
    curatorAccess:
      bearerFormat: JWT
      scheme: bearer
      type: http
      x-bearerInfoFunc: backend.corpora.lambdas.api.v1.authentication.curation_apikey_info_func
    curatorAccessLenient:
      bearerFormat: JWT
      scheme: bearer
      type: http
      x-bearerInfoFunc: backend.corpora.lambdas.api.v1.authentication.curation_apikey_info_func_lenient
