openapi: 3.0.0
info:
  version: "1.0.0"
  title: Chan Zuckerburg Initiative cellxgene Data Portal API
  description: >-
    This API is under development, and subject frequent breaking changes without notice. Users are encouraged to use the
    https://cellxgene.cziscience.com to access the cellxgene Data Portal.
servers:
  - description: Production environment
    url: https://api.corpora.cziscience.com
  - description: Development environment
    url: https://api.dev.corpora.cziscience.com
  - description: Staging environment
    url: https://api.staging.corpora.cziscience.com
paths:
  /dp/v1/wmg/cell_types:
    get:
      tags:
        - wmg
      summary: Get WMG cell types (WMG FEATURE PROTOTYPE)
      security:
        - cxguserCookieLenient: [ ]
        - { }
      description: >-
        JSON of all genes
      operationId: backend.corpora.lambdas.api.v1.wmg.get_cell_types
      parameters: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - id
                    - name
                  properties:
                    id:
                      type: string
                    name:
                      type: string
        "400":
          $ref: "#/components/responses/400"
  /dp/v1/wmg/genes:
    get:
      tags:
        - wmg
      summary: Get WMG genes (WMG FEATURE PROTOTYPE)
      security:
        - cxguserCookieLenient: [ ]
        - { }
      description: >-
        JSON of all cell types
      operationId: backend.corpora.lambdas.api.v1.wmg.get_genes
      parameters: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - id
                    - name
                  properties:
                    id:
                      type: string
                    name:
                      type: string
        "400":
          $ref: "#/components/responses/400"
  /dp/v1/wmg/genes/{gene_name}:
    get:
      tags:
        - wmg
      summary: Get WMG gene expression for a given gene name (WMG FEATURE PROTOTYPE)
      security:
        - cxguserCookieLenient: [ ]
        - { }
      description: >-
        JSON of gene expression for a given gene
      operationId: backend.corpora.lambdas.api.v1.wmg.get_gene_expression
      parameters:
      - name: gene_name
        in: path
        required: true
        schema:
          type: string
        description: The name of the gene
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - id
                    - pc
                    - me
                  properties:
                    id:
                      type: string
                    pc:
                      type: number
                      format: float
                    me:
                      type: number
                      format: float
        "400":
          $ref: "#/components/responses/400"
  /dp/v1/collections:
    get:
      tags:
        - collections
      summary: List published collections in Corpora
      security:
        - cxguserCookieLenient: []
        - {}
      description: >-
        This lists all collections and their UUIDs that currently exist in the corpora. If a parameter is specified as
        a filter, then only collections that meet the status criteria will be outputted.
      operationId: backend.corpora.lambdas.api.v1.collection.get_collections_list
      parameters:
        - $ref: "#/components/parameters/query_user_uuid"
        - name: from_date
          in: query
          schema:
            type: integer
          description: The date after which collections should have been created. In seconds since epoch.
        - name: to_date
          in: query
          description: The date before which collections should have been created. In seconds since epoch.
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - collections
                properties:
                  collections:
                    type: array
                    items:
                      type: object
                      required:
                        - id
                        - created_at
                      properties:
                        id:
                          $ref: "#/components/schemas/collection_uuid"
                        created_at:
                          type: number
                  from_date:
                    type: integer
                  to_date:
                    type: integer
        "400":
          $ref: "#/components/responses/400"
    post:
      tags:
        - collections
      summary: Create a collection
      security:
        - cxguserCookie: []
      description: >-
        Creates a new collection in corpora. Once a collection is created it can be linked to datasets.
      operationId: backend.corpora.lambdas.api.v1.collection.create_collection
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - name
                - description
                - contact_name
                - contact_email
              properties:
                name:
                  type: string
                  description: name of the collection
                description:
                  type: string
                  description: description of the collection
                contact_name:
                  type: string
                  description: name of the primary person of contact for the collection
                contact_email:
                  type: string
                  description: email of contact person for the collection
                curator_name:
                  type: string
                  description: name of the curator of the collection.
                links:
                  $ref: "#/components/schemas/links"
      responses:
        "201":
          description: A new collection has been created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  collection_uuid:
                    $ref: "#/components/schemas/collection_uuid"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"

  /dp/v1/collections/{collection_uuid}:
    get:
      tags:
        - collections
      summary: Get a collection's full details
      security:
        - cxguserCookieLenient: []
        - {}
      description: >-
        This will return all datasets and associated attributes.
      operationId: backend.corpora.lambdas.api.v1.collection.get_collection_details
      parameters:
        - $ref: "#/components/parameters/path_collection_uuid"
        - $ref: "#/components/parameters/query_visibility"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/collection"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "410":
          description: Gone
    post:
      tags:
        - collections
      summary: Start a revision of a public collection,
      security:
        - cxguserCookie: []
        - {}
      description: >-
        This will return a private version of the public collection with all datasets and assoicated attributes of the
        public collection.
      operationId: backend.corpora.lambdas.api.v1.collection.post_collection_revision
      parameters:
        - $ref: "#/components/parameters/path_collection_uuid"
      responses:
        "201":
          description: A new collection revision has been created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/collection"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"

    put:
      tags:
        - collections
      summary: Update a private collection's details
      security:
        - cxguserCookie: []
      description: >-
        Update a private collection's summary, links, contact info, and description details.
      operationId: backend.corpora.lambdas.api.v1.collection.update_collection
      parameters:
        - $ref: "#/components/parameters/path_collection_uuid"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: name of the collection
                description:
                  type: string
                  description: description of the collection
                contact_name:
                  type: string
                  description: name of the primary person of contact for the collection
                contact_email:
                  type: string
                  description: email of contact person for the collection
                curator_name:
                  type: string
                  description: name of the curator of the collection
                links:
                  $ref: "#/components/schemas/links"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/collection"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"

    delete:
      tags:
        - collections
      summary: Delete a collection
      security:
        - cxguserCookie: []
      description: >-
        Deletes an entire private collection from cellxgene data-portal, including any generated artifacts/assets and
        deployments.
      operationId: backend.corpora.lambdas.api.v1.collection.delete_collection
      parameters:
        - $ref: "#/components/parameters/path_collection_uuid"
        - $ref: "#/components/parameters/query_visibility"
      responses:
        "204":
          $ref: "#/components/responses/204"
        "401":
          $ref: "#/components/responses/401"

  /dp/v1/collections/{collection_uuid}/upload-links:
    post:
      summary: Start a dataset upload
      tags:
        - collections
        - datasets
      description: >-
        An authenticated user can upload a file from a shared link to add a dataset into their collection.
      security:
        - cxguserCookie: []
      operationId: backend.corpora.lambdas.api.v1.collection_uuid.upload.link
      parameters:
        - $ref: "#/components/parameters/path_collection_uuid"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  description: The shared link generated by dropbox linking to a dataset.
                  type: string
              required:
                - url
      responses:
        "202":
          description: The upload request was accepted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  dataset_uuid:
                    type: string
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "409":
          $ref: "#/components/responses/409"
        "413":
          $ref: "#/components/responses/413"

    put:
      summary: Replace an existing dataset.
      tags:
        - collections
        - datasets
      description: >-
        An authenticated user can upload a file from a shared link to replace an existing dataset in their collection.

        The existing dataset must be in an error start or completely uploaded before a replacement can be attempted.
        Once the upload of the replacement dataset is complete, the previous version of the dataset is removed and is
        no longer available for downloading through this collection. The replacement datasets are not publicly available
        until the collection revision is published. The old datasets are available in the public collection until the
        collection revision is published.
      security:
        - cxguserCookie: []
      operationId: backend.corpora.lambdas.api.v1.collection_uuid.upload.relink
      parameters:
        - $ref: "#/components/parameters/path_collection_uuid"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  description: The shared link generated by dropbox linking to a dataset.
                  type: string
                id:
                  $ref: "#/components/schemas/dataset_uuid"
              required:
                - url
                - id
      responses:
        "202":
          description: The upload request was accepted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  dataset_uuid:
                    type: string
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "405":
          $ref: "#/components/responses/405"
        "413":
          $ref: "#/components/responses/413"

  /dp/v1/collections/{collection_uuid}/genesets:
    post:
      tags:
        - collections
        - genesets
      summary: Add genesets to a collection
      security:
        - cxguserCookie: []
      description: >-
        Add genesets to a private collection
      operationId: backend.corpora.lambdas.api.v1.collection_uuid.gene_set.post
      parameters:
        - $ref: "#/components/parameters/path_collection_uuid"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                genesets:
                  description: A list of genesets including their gene symbols and descriptions
                  $ref: "#/components/schemas/user_defined_gene_sets"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/gene_set"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"

  /dp/v1/collections/{collection_uuid}/publish:
    post:
      tags:
        - collections
      summary: Publish a collection
      security:
        - cxguserCookie: []
      description: >-
        Update status of specified collection to PUBLIC.  This will make it
        visible on the public sites.

        If publishing modification to a previously published collection, this will replace the old collection with the new
        published collection. The old collection will no longer be accessible.
      operationId: backend.corpora.lambdas.api.v1.collection_uuid.publish.post
      parameters:
        - $ref: "#/components/parameters/path_collection_uuid"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data_submission_policy_version:
                  type: string
                  description: Which data submission policy was the collection submitted under
      responses:
        "202":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  collection_uuid:
                    $ref: "#/components/schemas/collection_uuid"
                  visibility:
                    $ref: "#/components/schemas/visibility"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"

  /dp/v1/collections/index:
    get:
      tags:
        - collections
      summary: >-
        Returns all public, non tombstoned collections. This endpoint is meant to be used for displaying collections
        in a compact view. It doesn't return all the fields, so it is not suitable for general usage.
      operationId: backend.corpora.lambdas.api.v1.collection.get_collections_index
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - id
                    - name
                    - published_at
                    - revised_at
                  properties:
                    id:
                      $ref: "#/components/schemas/collection_uuid"
                    created_at:
                      type: number
        "400":
          $ref: "#/components/responses/400"

  /dp/v1/datasets/{dataset_uuid}:
    delete:
      tags:
        - datasets
      summary: Delete a dataset
      description: >-
        Cancels the in process upload of a dataset to the data portal and cleans up (removes) any artifacts created
        in the upload process. If the dataset has already been uploaded and converted, this endpoint deletes it from
        the data portal and removes associated artifacts
      operationId: backend.corpora.lambdas.api.v1.dataset.delete_dataset
      security:
        - cxguserCookie: []
      parameters:
        - $ref: "#/components/parameters/path_dataset_uuid"
      responses:
        "202":
          $ref: "#/components/responses/202"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "405":
          $ref: "#/components/responses/405"

  /dp/v1/datasets/meta:
    get:
      tags:
        - datasets
      summary: Given an explorer url return information identifying the dataset it represents
      description: >-
        Given a cellxgene Explorer url return some basic metadata about the dataset it represent in the cellxgene
        Portal data model including its associated dataset id, the s3_uri of the dataset, its tombstone status and
        the associated parent collection ID.
      operationId: backend.corpora.lambdas.api.v1.dataset.get_dataset_identifiers
      parameters:
        - in: query
          required: true
          name: url
          schema:
            type: string
          description: The url used to access this dataset in the explorer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/dataset_identifiers"
        "404":
          $ref: "#/components/responses/404"

  /dp/v1/datasets/{dataset_uuid}/assets:
    get:
      tags:
        - datasets
      summary: Dataset assets
      description: >-
        Return a list of all the dataset's assets
      operationId: backend.corpora.lambdas.api.v1.dataset.get_dataset_assets
      parameters:
        - $ref: "#/components/parameters/path_dataset_uuid"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"

  /dp/v1/datasets/{dataset_uuid}/asset/{asset_uuid}:
    post:
      tags:
        - datasets
      summary: Request to download a dataset
      description: >-
        Request to download a file which on success will generate a pre-signed URL to download the dataset.
      operationId: backend.corpora.lambdas.api.v1.dataset.post_dataset_asset
      parameters:
        - $ref: "#/components/parameters/path_dataset_uuid"
        - name: asset_uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  dataset_uuid:
                    $ref: "#/components/schemas/dataset_uuid"
                  presigned_url:
                    type: string
                  file_name:
                    type: string
                  file_size:
                    type: number
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"

  /dp/v1/datasets/{dataset_uuid}/gene_sets:
    post:
      tags:
        - datasets
        - genesets
      summary: Update links between a dataset and gene sets
      security:
        - cxguserCookie: []
      description: >-
        Request to update (add or remove) linkages between a dataset and gene sets. The request must be made by the
        collection owner and the dataset and gene sets must all belong to the same private collection
      operationId: backend.corpora.lambdas.api.v1.dataset.post_dataset_gene_sets
      parameters:
        - $ref: "#/components/parameters/path_dataset_uuid"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - add
                - remove
              properties:
                add:
                  type: array
                  items:
                    type: string
                remove:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/gene_set"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"

  /dp/v1/datasets/{dataset_uuid}/status:
    get:
      tags:
        - datasets
      summary: Get the status of a dataset upload.
      operationId: backend.corpora.lambdas.api.v1.dataset.get_status
      security:
        - cxguserCookie: []
      parameters:
        - $ref: "#/components/parameters/path_dataset_uuid"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  dataset_uuid:
                    $ref: "#/components/schemas/dataset_uuid"
                  processing_status:
                    type: string
                    enum: [PENDING, SUCCESS, FAILURE]
                  upload_status:
                    type: string
                    enum:
                      [
                        WAITING,
                        UPLOADING,
                        UPLOADED,
                        FAILED,
                        CANCEL_PENDING,
                        CANCELED,
                        NA,
                      ]
                  upload_message:
                    type: string
                  upload_progress:
                    type: number
                  validation_status:
                    type: string
                    enum: [VALIDATING, VALID, INVALID, NA]
                  validation_message:
                    type: string
                  h5ad_status:
                    type: string
                    enum:
                      [
                        CONVERTING,
                        CONVERTED,
                        UPLOADING,
                        UPLOADED,
                        SKIPPED,
                        FAILED,
                        NA,
                      ]
                  cxg_status:
                    type: string
                    enum:
                      [
                        CONVERTING,
                        CONVERTED,
                        UPLOADING,
                        UPLOADED,
                        SKIPPED,
                        FAILED,
                        NA,
                      ]
                  rds_status:
                    type: string
                    enum:
                      [
                        CONVERTING,
                        CONVERTED,
                        UPLOADING,
                        UPLOADED,
                        SKIPPED,
                        FAILED,
                        NA,
                      ]
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"

  /dp/v1/datasets/index:
    get:
      tags:
        - datasets
      summary: >-
        Returns all public, non tombstoned datasets. This endpoint is meant to be used for displaying datasets
        in a compact view. It doesn't return all the fields, so it is not suitable for general usage.
      security:
        - cxguserCookieLenient: []
        - {}
      description: >-
        STUB
      operationId: backend.corpora.lambdas.api.v1.dataset.get_datasets_index
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    collection_id:
                      type: string
                    assay:
                      $ref: "#/components/schemas/ontology_element_array"
                    tissue:
                      $ref: "#/components/schemas/ontology_element_array"
                    disease:
                      $ref: "#/components/schemas/ontology_element_array"
                    sex:
                      $ref: "#/components/schemas/ontology_element_array"
                    ethnicity:
                      $ref: "#/components/schemas/ontology_element_array"
                    organism:
                      $ref: "#/components/schemas/ontology_element_array"
                    development_stage:
                      $ref: "#/components/schemas/ontology_element_array"
                    cell_count:
                      type: integer
                    cell_type:
                      $ref: "#/components/schemas/ontology_element_array"
                    mean_genes_per_cell:
                      type: number
        "400":
          $ref: "#/components/responses/400"

  /dp/v1/genesets/{geneset_uuid}:
    delete:
      tags:
        - genesets
      summary: Delete a genese
      security:
        - cxguserCookie: []
      description: >-
        Delete a gene by set removing it from a collection and any data sets it was linked to.
      operationId: backend.corpora.lambdas.api.v1.gene_sets.delete
      parameters:
        - $ref: "#/components/parameters/path_geneset_uuid"
      responses:
        "202":
          $ref: "#/components/responses/202"
        "403":
          $ref: "#/components/responses/403"
        "405":
          $ref: "#/components/responses/405"

  /dp/v1/login:
    get:
      tags:
        - authentication
      summary: login to the system
      operationId: backend.corpora.lambdas.api.v1.authentication.login
      responses:
        "200":
          $ref: "#/components/responses/200"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"

  /dp/v1/logout:
    get:
      tags:
        - authentication
      summary: logout of the system
      operationId: backend.corpora.lambdas.api.v1.authentication.logout
      responses:
        "200":
          $ref: "#/components/responses/200"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"

  /dp/v1/userinfo:
    get:
      tags:
        - authentication
      summary: retrieve user information if the user is logged in
      operationId: backend.corpora.lambdas.api.v1.authentication.userinfo
      security:
        - cxguserCookie: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userinfo"
          $ref: "#/components/responses/200"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"

  /dp/v1/oauth2/callback:
    get:
      tags:
        - authentication
      summary: callback function from auth server after login
      operationId: backend.corpora.lambdas.api.v1.authentication.oauth2_callback
      responses:
        "200":
          $ref: "#/components/responses/200"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
  /dp/v1/auth/key:
    get:
      summary: Fetch the identifier of the curator's active API key -- for use with Data Portal UI
      operationId: backend.corpora.lambdas.api.v1.auth.keys.get
      security:
        - cxguserCookie: [ ]
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
    post:
      summary: Generate the curator's API key -- for use with Data Portal UI
      description: >-
        Generate and return a curator API key for the user. If there is already a key associated with the
        user's curator profile, replace it with the new key.
      operationId: backend.corpora.lambdas.api.v1.auth.keys.post
      security:
        - cxguserCookie: []
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  key:
                    type: string
        "401":
          $ref: "#/components/responses/401"
        "400":
          $ref: "#/components/responses/400"
    delete:
      summary: Delete the curator's API key -- for use with Data Portal UI
      operationId: backend.corpora.lambdas.api.v1.auth.keys.delete
      security:
        - cxguserCookie: []
      responses:
        "202":
          $ref: "#/components/responses/202"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  /dp/v1/deployed_version:
    get:
      summary: Returns version information
      operationId: backend.corpora.lambdas.api.v1.version.get
      responses:
        "200":
          $ref: "#/components/responses/200"

  /wmg/v1/primary_filter_dimensions:
    get:
      summary: Returns the ontology terms for organism and tissue type that can be used when specifying a WMG query.
      description: >-
      tags:
        - wmg
      operationId: backend.wmg.api.v1.primary_filter_dimensions
      parameters: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  snapshot_id:
                    $ref: "#/components/schemas/wmg_snapshot_id"
                  organism_terms:
                    $ref: "#/components/schemas/wmg_ontology_term_id_label_list"
                  tissue_terms:
                    $ref: "#/components/schemas/wmg_ontology_term_id_label_list"
                  gene_terms:
                    # TODO: specify further: https://app.zenhub.com/workspaces/single-cell-5e2a191dad828d52cc78b028/issues/chanzuckerberg/single-cell-data-portal/1967
                    # `[{"<ontology_term_id>": "<ontology_term_label"}, ...]`
                    type: object
        "404":
          $ref: "#/components/responses/404"
  /wmg/v1/query:
    post:
      tags:
        - wmg
      operationId: backend.wmg.api.v1.query
      parameters: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  type: object
                  required:
                    - gene_ontology_term_ids
                    - organism_ontology_term_id
                    - tissue_ontology_term_ids
                  properties:
                      gene_ontology_term_ids:
                        $ref: "#/components/schemas/wmg_ontology_term_id_list"
                      organism_ontology_term_id:
                        type: string
                      tissue_ontology_term_ids:
                        $ref: "#/components/schemas/wmg_ontology_term_id_list"
                      dataset_ids:
                        type: array
                        items:
                          type: string
                          format: uuid
                      disease_ontology_term_ids:
                        $ref: "#/components/schemas/wmg_ontology_term_id_list"
                      sex_ontology_term_ids:
                        $ref: "#/components/schemas/wmg_ontology_term_id_list"
                      development_ontology_stage_term_ids:
                        $ref: "#/components/schemas/wmg_ontology_term_id_list"
                      ethnicity_ontology_term_ids:
                        $ref: "#/components/schemas/wmg_ontology_term_id_list"
                include_filter_dims:
                  type: boolean
                  default: false
              required:
                - filter
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                {
                  'snapshot_id': '8ce15034-162a-4e2e-9987-eb1af08bd4d4',
                  'expression_summary': {
                    'gene1': {
                      'tissuetype1': [
                        { 'id': 'CL00000', 'me': 0.0, 'n': 0, 'pc': 0.0, 'tpc': 0.0 },
                        { 'id': 'CL00001', 'me': 0.0, 'n': 0, 'pc': 0.0, 'tpc': 0.0 },
                        { 'id': 'CL00002', 'me': 0.0, 'n': 0, 'pc': 0.0, 'tpc': 0.0 }
                      ],
                      'tissuetype2': [
                        { 'id': 'CL00000', 'me': 0.0, 'n': 0, 'pc': 0.0, 'tpc': 0.0 },
                        { 'id': 'CL00001', 'me': 0.0, 'n': 0, 'pc': 0.0, 'tpc': 0.0 },
                        { 'id': 'CL00002', 'me': 0.0, 'n': 0, 'pc': 0.0, 'tpc': 0.0 }
                      ]
                    },
                    'gene2': {
                      'tissuetype1': [
                        { 'id': 'CL00000', 'me': 0.0, 'n': 0, 'pc': 0.0, 'tpc': 0.0 },
                        { 'id': 'CL00001', 'me': 0.0, 'n': 0, 'pc': 0.0, 'tpc': 0.0 },
                        { 'id': 'CL00002', 'me': 0.0, 'n': 0, 'pc': 0.0, 'tpc': 0.0 }
                      ],
                      'tissuetype2': [
                        { 'id': 'CL00000', 'me': 0.0, 'n': 0, 'pc': 0.0, 'tpc': 0.0 },
                        { 'id': 'CL00001', 'me': 0.0, 'n': 0, 'pc': 0.0, 'tpc': 0.0 },
                        { 'id': 'CL00002', 'me': 0.0, 'n': 0, 'pc': 0.0, 'tpc': 0.0 }
                      ]
                    }
                  },
                  'term_id_labels': {
                    'cell_types': [
                      { 'CL00000': 'CL00000_label' },
                      { 'CL00001': 'CL00001_label' },
                      { 'CL00002': 'CL00002_label' }
                    ],
                    'genes': [
                      { 'gene1': 'gene1_label' },
                      { 'gene2': 'gene2_label' }
                    ]
                  }
                }
              schema:
                type: object
                required:
                  - expression_summary
                  - term_id_labels
                properties:
                  snapshot_id:
                    $ref: "#/components/schemas/wmg_snapshot_id"
                  expression_summary:
                    type: object
                    # we use `additionalProperties` instead of `properties`, since the object's property names are
                    # ontology term ids, rather than a fixed set of names
                    additionalProperties:
                      description: ->
                        One property per gene, where the gene ontology term id is the property name, and the property
                        value is an object of tissue types.
                      type: object
                      # we use `additionalProperties` instead of `properties`, since the object's property names are
                      # ontology term ids, rather than a fixed set of names
                      additionalProperties:
                        description: ->
                          One property per tissue type, where the tissue type ontology term id is the property name,
                          and the property value is an ordered array of viz matrix "dots" (data points). The ordering of
                          the array elements (cell types) should be preserved in the client's rendering of this
                          data.
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              description: cell type ontology term id
                              type: string
                            me:
                              description: mean expression
                              type: number
                              format: float
                              maxLength: 4
                            pc:
                              description: percentage of cells expressing gene within this cell type
                              type: number
                              format: float
                              maxLength: 4
                              minimum: 0.0
                              maximum: 100.0
                            tpc:
                              description: perecentage of cells for this cell type within tissue (cell type's cell count / tissue's total cell count)
                              type: number
                              format: float
                              maxLength: 4
                              minimum: 0.0
                              maximum: 100.0
                            n:
                              description: number of expressed cells (non-zero expression) within this cell type
                              type: integer
                              minimum: 0.0
                  term_id_labels:
                    type: object
                    required:
                      - genes
                      - cell_types
                    properties:
                      genes:
                        $ref: "#/components/schemas/wmg_ontology_term_id_label_list"
                      cell_types:
                        $ref: "#/components/schemas/wmg_ontology_term_id_label_list"
                  filter_dimensions:
                    type: object
                    properties:
                      datasets:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            label:
                              type: string
                            collection_label:
                              type: string
                            collection_url:
                              type: string
                              format: url
                      disease_terms:
                        $ref: "#/components/schemas/wmg_ontology_term_id_label_list"
                      sex_terms:
                        $ref: "#/components/schemas/wmg_ontology_term_id_label_list"
                      development_stage_terms:
                        $ref: "#/components/schemas/wmg_ontology_term_id_label_list"
                      ethnicity_terms:
                        $ref: "#/components/schemas/wmg_ontology_term_id_label_list"


components:
  schemas:
    user_uuid:
      description: A unique identifier of a logged in User of Corpora.
      type: string
    userinfo:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/user_uuid"
        name:
          description: The user's name
          type: string
        email:
          description: The user's email
          type: string
    collection_uuid:
      description: A unique identifier of a Collection.
      type: string
    dataset_uuid:
      description: A unique identifier of a Dataset.
      type: string
    geneset_uuid:
      description: A unique identifier of a gene set.
      type: string
    visibility:
      description: >-
        Determines the visibility of the collection, that will either make the collection visible on the public
        sites or only viewable through obfuscated URLs.
      type: string
      enum: [PUBLIC, PRIVATE]
    distribution:
      description: >-
        Cellxgene runs a heuristic to detect the approximate distribution of the data in X so that it can accurately
        calculate statistical properties of the data. This field enables the curator to override this heuristic
        and specify the data distribution explicitly.
      type: string
      enum: [COUNT, NORMAL]
    is_primary_data:
      description: >-
        Describes whether cellular observations for this dataset are all canonical (PRIMARY),
        all non-canonical (SECONDARY), or contain a mixture (BOTH).
      type: string
      enum: [PRIMARY, SECONDARY, BOTH]
    links:
      type: array
      items:
        type: object
        additionalProperties: false
        required:
          - link_url
          - link_type
        properties:
          link_name:
            type: string
          link_url:
            type: string
          link_type:
            type: string
            enum: [PROTOCOL, RAW_DATA, DOI, LAB_WEBSITE, OTHER, DATA_SOURCE]
    collection:
      type: object
      required:
        - name
        - description
        - id
        - visibility
        - links
        - datasets
        - created_at
        - updated_at
        - data_submission_policy_version
      properties:
        access_type:
          type: string
          enum: [READ, WRITE]
        created_at:
          type: number
        updated_at:
          type: number
        description:
          type: string
        name:
          type: string
        id:
          $ref: "#/components/schemas/collection_uuid"
        visibility:
          $ref: "#/components/schemas/visibility"
        links:
          $ref: "#/components/schemas/links"
        contact_name:
          type: string
        contact_email:
          type: string
        curator_name:
          type: string
        data_submission_policy_version:
          type: string
        datasets:
          type: array
          items:
            $ref: "#/components/schemas/dataset"
        genesets:
          type: array
          items:
            $ref: "#/components/schemas/gene_set"
    ontology_element:
      type: object
      properties:
        ontology_term_id:
          type: string
        label:
          type: string
    ontology_element_array:
      type: array
      items:
        $ref: "#/components/schemas/ontology_element"
    dataset:
      type: object
      required:
        - id
        - name
        - revision
        - collection_id
        - collection_visibility
      properties:
        id:
          $ref: "#/components/schemas/dataset_uuid"
        assay:
          $ref: "#/components/schemas/ontology_element_array"
        tissue:
          $ref: "#/components/schemas/ontology_element_array"
        disease:
          $ref: "#/components/schemas/ontology_element_array"
        sex:
          $ref: "#/components/schemas/ontology_element_array"
        ethnicity:
          $ref: "#/components/schemas/ontology_element_array"
        organism:
          $ref: "#/components/schemas/ontology_element_array"
        development_stage:
          $ref: "#/components/schemas/ontology_element_array"
        name:
          type: string
        revision:
          type: integer
        dataset_deployments:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
        linked_genesets:
          type: array
          items:
            type: string
        dataset_assets:
          type: array
          items:
            $ref: "#/components/schemas/dataset_asset"
        collection_id:
          $ref: "#/components/schemas/collection_uuid"
        collection_visibility:
          $ref: "#/components/schemas/visibility"
        is_primary_data:
          $ref: "#/components/schemas/is_primary_data"
        cell_type:
          $ref: "#/components/schemas/ontology_element_array"
        cell_count:
          type: integer
        X_normalization:
          type: string
        X_approximate_distribution:
          $ref: "#/components/schemas/distribution"
        schema_version:
          type: string
        tombstone:
          type: boolean
    dataset_asset:
      type: object
      properties:
        id:
          type: string
        dataset_id:
          type: string
        filetype:
          type: string
          enum: [H5AD, RDS, CXG]
        filename:
          type: string
        type:
          type: string
          enum: [REMIX, ORIGINAL]
        s3_uri:
          type: string
    gene_set:
      type: object
      properties:
        name:
          type: string
        id":
          type: string
        description:
          type: string
        linked_datasets:
          type: array
          items:
            type: string
    problem:
      type: object
      description: Error message container for HTTP APIs.
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
    user_defined_gene_sets:
      type: object
      description: User created geneset information
      properties:
        gene_set_name:
          type: string
        gene_set_description:
          type: string
        genes:
          type: array
          items:
            type: object
            description: Gene specific information
            properties:
              gene_symbol:
                type: string
              gene_description:
                type: string
              additional_params:
                type: object
    dataset_identifiers:
      type: object
      description: Information for identifying and accessing a datatset
      required:
        - dataset_id
        - collection_id
        - tombstoned
      properties:
        dataset_id:
          type: string
        collection_id:
          type: string
        explorer_s3_uri:
          type: string
        tombstoned:
          type: boolean
    wmg_ontology_term_id_label_list:
      description: ->
        An array of ontology term ids and labels, where array elements are single-element objects of the
        form "<id>":"<label>"
      type: array
      items:
        description: ->
          A single-element object with the ontology term id as the element's property name and the ontology term label
          as the element's property value.
        type: object
        # TODO: fix: https://app.zenhub.com/workspaces/single-cell-5e2a191dad828d52cc78b028/issues/chanzuckerberg/single-cell-data-portal/1967
        # `{"<ontology_term_id>": "<ontology_term_label"}`
#        maxProperties: 1
#        additionalProperties:
#          type: string
    wmg_ontology_term_id_list:
      type: array
      items:
        type: string
    wmg_snapshot_id:
      type: string
      format: uuid


  parameters:
    path_collection_uuid:
      name: collection_uuid
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/collection_uuid"
    path_dataset_uuid:
      name: dataset_uuid
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/dataset_uuid"
    path_geneset_uuid:
      name: geneset_uuid
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/geneset_uuid"
    path_filename:
      name: filename
      description: The name of a file to add, remove, or download.
      in: path
      required: true
      schema:
        type: string
    query_user_uuid:
      name: user_uuid
      description: an ID that represents the user.
      in: query
      schema:
        $ref: "#/components/schemas/user_uuid"
    query_visibility:
      name: visibility
      in: query
      schema:
        $ref: "#/components/schemas/visibility"
        default: PUBLIC

  responses:
    200:
      description: OK.
    201:
      description: Created.
    202:
      description: Accepted
    204:
      description: No Content
    400:
      description: Invalid parameter.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problem"
    401:
      description: Failed to authenticate.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problem"
    403:
      description: Unauthorized.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problem"
    404:
      description: Resource not found.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problem"
    405:
      description: Method not allowed.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problem"
    409:
      description: File conflict.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problem"
    413:
      description: Exceed File Size Limit
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problem"
  securitySchemes:
    cxguserCookie:
      type: apiKey
      in: cookie
      name: cxguser
      x-apikeyInfoFunc: backend.corpora.lambdas.api.v1.authentication.apikey_info_func
    cxguserCookieLenient:
      type: apiKey
      in: cookie
      name: cxguser
      x-apikeyInfoFunc: backend.corpora.lambdas.api.v1.authentication.apikey_info_func_lenient
