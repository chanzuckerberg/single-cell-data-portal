openapi: 3.0.0
info:
servers:
paths:
  /curation/auth/key:
    post:
      summary: Regenerate the curator's API key
      security: 
        - cxguserCookie: [] 
		get:
      summary: Return the identifier of the curator's active API key
      security: 
        <API key-checking function>
          #    delete:
          #      summary: Delete the curator's API key
          #      security: 
          #        - cxguserCookie: [] 

  /curation/auth/token:
		post:
      summary: Generate an access token
      security:
        <API key-checking function>

  /curation/collections:
    get:
      description: Get all Collections metadata
      responses:

		post:
      description: Create a new Collection

  /curation/collections/{collection_id}:
		get:
      description: Retrieve Collection metadata and associated Datasets, public and private
      parameters:
        - in: path
          name: collection_id
        - in: query
          name: visibility
          enum: [public, private]
    put:
      description: Start a revision and/or update Collection metadata
      parameters:
        - in: path
          name: collection_id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  description: name of the collection
                description:
                  type: string
                  description: description of the collection
                contact_name:
                  type: string
                  description: name of the primary person of contact for the collection
                contact_email:
                  type: string
                  description: email of contact person for the collection
                curator_name:
                  type: string
                  description: name of the curator of the collection.
                links:
                  $ref: "#/components/schemas/links"

  /curation/collections/{collection_id}/datasets:
		delete:
			parameters:
				- in: query
					Required: false
					Name: curator_tag
					Schema:
						Type: string
				- in: query
					Required: false
					Name: id
					Schema:
						Type: string
		patch:
			parameters:
				- in: query
					Required: false
					Name: curator_tag
					Schema:
						Type: string
				- in: query
					Required: false
					Name: id
					Schema:
						Type: string
				requestBody:
  		requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                curator_tag:
                  type: string
                  description: curator-provided tag

  /curation/collections/{collection_id}/datasets/upload-links:
    put:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                curator_tag:
                id:
                link:
                  $ref:

  /curation/collections/{collection_id}/datasets/upload-s3:
    put:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false

  /curation/collections/{collection_id}/datasets/status:
		get:
			parameters:
				- in: query
					Required: false
					Name: curator_tag
					Schema:
						Type: string
				- in: query	
					Required: false
					Name: id
					Schema:
						Type: string
	
components:
  schemas:
    user_uuid:
      description: A unique identifier of a logged in User of Corpora.
      type: string
    userinfo:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/user_uuid"
        name:
          description: The user's name
          type: string
        email:
          description: The user's email
          type: string
    collection_uuid:
      description: A unique identifier of a Collection.
      type: string
    dataset_uuid:
      description: A unique identifier of a Dataset.
      type: string
    geneset_uuid:
      description: A unique identifier of a gene set.
      type: string
    visibility:
      description: >-
        Determines the visibility of the collection, that will either make the collection visible on the public
        sites or only viewable through obfuscated URLs.
      type: string
      enum: [PUBLIC, PRIVATE]
    distribution:
      description: >-
        Cellxgene runs a heuristic to detect the approximate distribution of the data in X so that it can accurately
        calculate statistical properties of the data. This field enables the curator to override this heuristic
        and specify the data distribution explicitly.
      type: string
      enum: [COUNT, NORMAL]
    is_primary_data:
      description: >-
        Describes whether cellular observations for this dataset are all canonical (PRIMARY),
        all non-canonical (SECONDARY), or contain a mixture (BOTH).
      type: string
      enum: [PRIMARY, SECONDARY, BOTH]
    links:
      type: array
      items:
        type: object
        additionalProperties: false
        required:
          - link_url
          - link_type
        properties:
          link_name:
            type: string
          link_url:
            type: string
          link_type:
            type: string
            enum: [PROTOCOL, RAW_DATA, DOI, LAB_WEBSITE, OTHER, DATA_SOURCE]
    collection:
      type: object
      required:
        - name
        - description
        - id
        - visibility
        - links
        - datasets
        - created_at
        - updated_at
        - data_submission_policy_version
      properties:
        access_type:
          type: string
          enum: [READ, WRITE]
        created_at:
          type: number
        updated_at:
          type: number
        description:
          type: string
        name:
          type: string
        id:
          $ref: "#/components/schemas/collection_uuid"
        visibility:
          $ref: "#/components/schemas/visibility"
        links:
          $ref: "#/components/schemas/links"
        obfuscated_uuid:
          type: string
        contact_name:
          type: string
        contact_email:
          type: string
        curator_name:
          type: string
        data_submission_policy_version:
          type: string
        datasets:
          type: array
          items:
            $ref: "#/components/schemas/dataset"
        genesets:
          type: array
          items:
            $ref: "#/components/schemas/gene_set"
    ontology_element:
      type: object
      properties:
        ontology_term_id:
          type: string
        label:
          type: string
    ontology_element_array:
      type: array
      items:
        $ref: "#/components/schemas/ontology_element"
    dataset:
      type: object
      required:
        - id
        - name
        - revision
        - collection_id
        - collection_visibility
      properties:
        id:
          $ref: "#/components/schemas/dataset_uuid"
        assay:
          $ref: "#/components/schemas/ontology_element_array"
        tissue:
          $ref: "#/components/schemas/ontology_element_array"
        disease:
          $ref: "#/components/schemas/ontology_element_array"
        sex:
          $ref: "#/components/schemas/ontology_element_array"
        ethnicity:
          $ref: "#/components/schemas/ontology_element_array"
        organism:
          $ref: "#/components/schemas/ontology_element_array"
        development_stage:
          $ref: "#/components/schemas/ontology_element_array"
        name:
          type: string
        revision:
          type: integer
        dataset_deployments:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
        linked_genesets:
          type: array
          items:
            type: string
        dataset_assets:
          type: array
          items:
            $ref: "#/components/schemas/dataset_asset"
        collection_id:
          $ref: "#/components/schemas/collection_uuid"
        collection_visibility:
          $ref: "#/components/schemas/visibility"
        is_primary_data:
          $ref: "#/components/schemas/is_primary_data"
        cell_type:
          $ref: "#/components/schemas/ontology_element_array"
        cell_count:
          type: integer
        X_normalization:
          type: string
        X_approximate_distribution:
          $ref: "#/components/schemas/distribution"
        schema_version:
          type: string
        tombstone:
          type: boolean
    dataset_asset:
      type: object
      properties:
        id:
          type: string
        dataset_id:
          type: string
        filetype:
          type: string
          enum: [H5AD, RDS, CXG]
        filename:
          type: string
        type:
          type: string
          enum: [REMIX, ORIGINAL]
        s3_uri:
          type: string
    gene_set:
      type: object
      properties:
        name:
          type: string
        id":
          type: string
        description:
          type: string
        linked_datasets:
          type: array
          items:
            type: string
    problem:
      type: object
      description: Error message container for HTTP APIs.
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
    user_defined_gene_sets:
      type: object
      description: User created geneset information
      properties:
        gene_set_name:
          type: string
        gene_set_description:
          type: string
        genes:
          type: array
          items:
            type: object
            description: Gene specific information
            properties:
              gene_symbol:
                type: string
              gene_description:
                type: string
              additional_params:
                type: object
    dataset_identifiers:
      type: object
      description: Information for identifying and accessing a datatset
      required:
        - dataset_id
        - collection_id
        - tombstoned
      properties:
        dataset_id:
          type: string
        collection_id:
          type: string
        explorer_s3_uri:
          type: string
        tombstoned:
          type: boolean

  parameters:
    path_collection_uuid:
      name: collection_uuid
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/collection_uuid"
    path_dataset_uuid:
      name: dataset_uuid
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/dataset_uuid"
    path_geneset_uuid:
      name: geneset_uuid
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/geneset_uuid"
    path_filename:
      name: filename
      description: The name of a file to add, remove, or download.
      in: path
      required: true
      schema:
        type: string
    query_user_uuid:
      name: user_uuid
      description: an ID that represents the user.
      in: query
      schema:
        $ref: "#/components/schemas/user_uuid"
    query_visibility:
      name: visibility
      in: query
      schema:
        $ref: "#/components/schemas/visibility"
        default: PUBLIC

  responses:
    200:
      description: OK
    201:
      description: Created
    202:
      description: Accepted
    204:
      description: No content.
    400:
      description: Invalid parameter.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problem"
    401:
      description: Failed to authenticate.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problem"
    403:
      description: Unauthorized.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problem"
    404:
      description: Resource not found.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problem"
    405:
      description: Method not allowed.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problem"
    409:
      description: File conflict.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problem"
    413:
      description: Exceed File Size Limit
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problem"
  securitySchemes:
    cxguserCookie:
      type: apiKey
      in: cookie
      name: cxguser
      x-apikeyInfoFunc: backend.corpora.lambdas.api.v1.authentication.apikey_info_func
    cxguserCookieLenient:
      type: apiKey
      in: cookie
      name: cxguser
      x-apikeyInfoFunc: backend.corpora.lambdas.api.v1.authentication.apikey_info_func_lenient
    dummyAuth:
      type: apiKey
      in: header
      name: cxgpublic
      x-apikeyInfoFunc: backend.corpora.lambdas.api.v1.authentication.apikey_dummy_info_func




POST auth/key
Generate an API key for an authenticated user. The generated key and key identifier is returned in the response body. This will be returned in the format {key_identifier.key}
GET auth/key
Returns a list of API key identifiers the user has generated. This gives us the flexibility to support multiple keys in the future.
DELETE auth/key
Delete the given an API key base on the identifier provided
POST auth/token
Generate an access token using the API key provided to authenticate the request.
GET /collections
Get metadata for authorized Collections
Request body
{ date_range: <range>, curator_name: [<name>] }
Response body 
List of collection metadata objects

POST /collections
Instantiate a new private Collection. Returns the id of the new Collection and S3 credentials to facilitate upload of an arbitrary number of new datasets to this Collection. Creates one new dataset for everyone link provided in request body, returns dataset ids.
Request body
Required: Collection metadata
Response body
Collection id
PUT /collections/{collection_id}
Update a collection’s metadata.
Request body 
Metadata to update
Response body (?)
(?) Full, updated metadata for the collection
GET /collections/{collection_id}
Returns the collection and datasets.

PUT /collections/{collection_id}/upload?source=(link|local)
Parameter:
source: [ link | local ] If source is link then a link is expected in request body and a dataset uuid is returned in the response. If local, then Temporary AWS credentials for S3 are returned in the response.
Request body:
(if source=link) link: the URL to the file to upload. It can be a dropbox shared link or a presign s3 URL. Must pair with dataset curator_tag if it is to replace an existing dataset, otherwise a new dataset is added to the collection.
Response Body:
(if source=local) S3_credentials
(if source=link) Dataset_uuid of new dataset

GET /collections/{collection_id}/{tag}/status
Retrieve processing status for a dataset (i.e., a recent upload). May wish to support multiple tags in a single call, or simply bundle with the earlier endpoint [/collections/{collection_id}] and include status in returned metadata for each dataset.
Parameters:
Curator tag
Collection id

DELETE /collections/{collection_id}
Delete a collection. Only allow for private collections.
Parameters:
Collection id
DELETE /datasets/?{collection_id=<collection_id>&curator_tag=<tag>|dataset_id=<id>}
Delete a dataset. Only allowed for datasets in private collections.
Query Parameters:
collection_id and tag OR dataset_id
PUT /datasets/?{curator_tag=<tag>|id=<dataset_id>}
Update metadata for a dataset (specifically, curator_tag)
 

