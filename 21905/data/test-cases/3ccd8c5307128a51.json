{"uid":"3ccd8c5307128a51","name":"test_type_inference[parameters20]","fullName":"tests.unit.processing.test_type_conversion_utils#test_type_inference","historyId":"450fc38f0509819f26f74875af0def69","time":{"start":1724897025624,"stop":1724897025625,"duration":1},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"patch_all","time":{"start":1724896969542,"stop":1724896969542,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"caplog","time":{"start":1724897025624,"stop":1724897025624,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"caplog::0","time":{"start":1724897025625,"stop":1724897025625,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.processing"},{"name":"suite","value":"test_type_conversion_utils"},{"name":"host","value":"2335ef7dbc37"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.processing.test_type_conversion_utils"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"parameters","value":"{'data': Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       990, 991, 992, 993, 994, 995, 996, 997, 998, 999],\n      dtype='int32', length=1000), 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":10,"unknown":0,"total":10},"items":[{"uid":"d1bf38af1fbb4f83","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21904//#testresult/d1bf38af1fbb4f83","status":"passed","time":{"start":1724893182194,"stop":1724893182194,"duration":0}},{"uid":"8b9cb7dafd14d645","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21903//#testresult/8b9cb7dafd14d645","status":"passed","time":{"start":1724891533544,"stop":1724891533544,"duration":0}},{"uid":"fcebef4ffe033181","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21898//#testresult/fcebef4ffe033181","status":"passed","time":{"start":1724878457643,"stop":1724878457644,"duration":1}},{"uid":"711069ecaa0c73ed","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21890//#testresult/711069ecaa0c73ed","status":"passed","time":{"start":1724781301805,"stop":1724781301805,"duration":0}},{"uid":"76320c9a55dc55a9","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21879//#testresult/76320c9a55dc55a9","status":"passed","time":{"start":1724687441338,"stop":1724687441339,"duration":1}},{"uid":"182d4eb8960b14a0","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21867//#testresult/182d4eb8960b14a0","status":"passed","time":{"start":1724352831958,"stop":1724352831958,"duration":0}},{"uid":"b365273f242a2243","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21860//#testresult/b365273f242a2243","status":"passed","time":{"start":1724286703302,"stop":1724286703302,"duration":0}},{"uid":"57a6c8c0bfd2e3bc","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21859//#testresult/57a6c8c0bfd2e3bc","status":"passed","time":{"start":1724285181757,"stop":1724285181758,"duration":1}},{"uid":"1163fff1ea7c867","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21857//#testresult/1163fff1ea7c867","status":"passed","time":{"start":1724281806547,"stop":1724281806547,"duration":0}}]},"tags":[]},"source":"3ccd8c5307128a51.json","parameterValues":["{'data': Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       990, 991, 992, 993, 994, 995, 996, 997, 998, 999],\n      dtype='int32', length=1000), 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"]}