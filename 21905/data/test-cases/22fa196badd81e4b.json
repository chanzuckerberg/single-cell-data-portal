{"uid":"22fa196badd81e4b","name":"test_type_inference[parameters16]","fullName":"tests.unit.processing.test_type_conversion_utils#test_type_inference","historyId":"dae67d4a78ba90c58eb76d1a357184c3","time":{"start":1724897025606,"stop":1724897025607,"duration":1},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"patch_all","time":{"start":1724896969542,"stop":1724896969542,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"caplog","time":{"start":1724897025606,"stop":1724897025606,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"caplog::0","time":{"start":1724897025607,"stop":1724897025607,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.processing"},{"name":"suite","value":"test_type_conversion_utils"},{"name":"host","value":"2335ef7dbc37"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.processing.test_type_conversion_utils"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"parameters","value":"{'data': Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       990, 991, 992, 993, 994, 995, 996, 997, 998, 999],\n      dtype='uint16', length=1000), 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":10,"unknown":0,"total":10},"items":[{"uid":"5cad661a90c02fa0","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21904//#testresult/5cad661a90c02fa0","status":"passed","time":{"start":1724893182176,"stop":1724893182176,"duration":0}},{"uid":"ca84a6f49cdb254a","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21903//#testresult/ca84a6f49cdb254a","status":"passed","time":{"start":1724891533526,"stop":1724891533526,"duration":0}},{"uid":"ffbd3521dd9ed463","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21898//#testresult/ffbd3521dd9ed463","status":"passed","time":{"start":1724878457625,"stop":1724878457625,"duration":0}},{"uid":"e4b034f7eb46f06f","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21890//#testresult/e4b034f7eb46f06f","status":"passed","time":{"start":1724781301786,"stop":1724781301786,"duration":0}},{"uid":"b5d21428c0df751","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21879//#testresult/b5d21428c0df751","status":"passed","time":{"start":1724687441317,"stop":1724687441318,"duration":1}},{"uid":"f9c297aae6f409f","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21867//#testresult/f9c297aae6f409f","status":"passed","time":{"start":1724352831940,"stop":1724352831940,"duration":0}},{"uid":"38cf20eaa044beee","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21860//#testresult/38cf20eaa044beee","status":"passed","time":{"start":1724286703283,"stop":1724286703283,"duration":0}},{"uid":"465dfe3590142997","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21859//#testresult/465dfe3590142997","status":"passed","time":{"start":1724285181739,"stop":1724285181740,"duration":1}},{"uid":"99f818888447d2be","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21857//#testresult/99f818888447d2be","status":"passed","time":{"start":1724281806528,"stop":1724281806529,"duration":1}}]},"tags":[]},"source":"22fa196badd81e4b.json","parameterValues":["{'data': Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       990, 991, 992, 993, 994, 995, 996, 997, 998, 999],\n      dtype='uint16', length=1000), 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"]}