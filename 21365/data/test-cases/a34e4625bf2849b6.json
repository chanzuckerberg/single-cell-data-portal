{"uid":"a34e4625bf2849b6","name":"test_type_inference[parameters37]","fullName":"tests.unit.processing.test_type_conversion_utils#test_type_inference","historyId":"ccb43d6934a2604ee40c380e26444173","time":{"start":1720651445804,"stop":1720651445804,"duration":0},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"patch_all","time":{"start":1720651386045,"stop":1720651386045,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"caplog","time":{"start":1720651445803,"stop":1720651445803,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0}],"afterStages":[{"name":"caplog::0","time":{"start":1720651445805,"stop":1720651445805,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0}],"labels":[{"name":"parentSuite","value":"tests.unit.processing"},{"name":"suite","value":"test_type_conversion_utils"},{"name":"host","value":"a8c7502adc05"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.processing.test_type_conversion_utils"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"parameters","value":"{'data': array([ nan, -inf,  -1.,  -0.,   0.,   0.,   1.,  inf,  nan],\n      dtype=float16), 'expected_encoding_dtype': <class 'numpy.float32'>, 'expected_schema_hint': {'type': 'float32'}, 'logs': None}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":10,"unknown":0,"total":10},"items":[{"uid":"131d26628c2c736b","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21361//#testresult/131d26628c2c736b","status":"passed","time":{"start":1720648366863,"stop":1720648366863,"duration":0}},{"uid":"743966840b1de725","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21352//#testresult/743966840b1de725","status":"passed","time":{"start":1720647469562,"stop":1720647469562,"duration":0}},{"uid":"3550d463c9dff0ef","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21351//#testresult/3550d463c9dff0ef","status":"passed","time":{"start":1720647304604,"stop":1720647304604,"duration":0}},{"uid":"b9894d2fd9c59360","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21350//#testresult/b9894d2fd9c59360","status":"passed","time":{"start":1720646951844,"stop":1720646951845,"duration":1}},{"uid":"72de3f9e96815c49","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21348//#testresult/72de3f9e96815c49","status":"passed","time":{"start":1720646550222,"stop":1720646550223,"duration":1}},{"uid":"a67e3060c322153d","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21341//#testresult/a67e3060c322153d","status":"passed","time":{"start":1720640018339,"stop":1720640018339,"duration":0}},{"uid":"63c1061d55253037","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21340//#testresult/63c1061d55253037","status":"passed","time":{"start":1720638027700,"stop":1720638027700,"duration":0}},{"uid":"f48ddcf1316a7cac","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21339//#testresult/f48ddcf1316a7cac","status":"passed","time":{"start":1720637367755,"stop":1720637367755,"duration":0}},{"uid":"89c3fc9b1b343550","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21338//#testresult/89c3fc9b1b343550","status":"passed","time":{"start":1720637236479,"stop":1720637236479,"duration":0}}]},"tags":[]},"source":"a34e4625bf2849b6.json","parameterValues":["{'data': array([ nan, -inf,  -1.,  -0.,   0.,   0.,   1.,  inf,  nan],\n      dtype=float16), 'expected_encoding_dtype': <class 'numpy.float32'>, 'expected_schema_hint': {'type': 'float32'}, 'logs': None}"]}