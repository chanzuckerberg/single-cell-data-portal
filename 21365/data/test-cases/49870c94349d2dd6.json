{"uid":"49870c94349d2dd6","name":"test_type_inference[parameters13]","fullName":"tests.unit.processing.test_type_conversion_utils#test_type_inference","historyId":"e3a07c89a2797e9b0ce1f70ecb5cbbb0","time":{"start":1720651445693,"stop":1720651445693,"duration":0},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"patch_all","time":{"start":1720651386045,"stop":1720651386045,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"caplog","time":{"start":1720651445692,"stop":1720651445693,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0}],"afterStages":[{"name":"caplog::0","time":{"start":1720651445694,"stop":1720651445694,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0}],"labels":[{"name":"parentSuite","value":"tests.unit.processing"},{"name":"suite","value":"test_type_conversion_utils"},{"name":"host","value":"a8c7502adc05"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.processing.test_type_conversion_utils"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"parameters","value":"{'data': <10x100 sparse matrix of type '<class 'numpy.int16'>'\n\twith 0 stored elements in Compressed Sparse Row format>, 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":10,"unknown":0,"total":10},"items":[{"uid":"c13e8e3580517758","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21361//#testresult/c13e8e3580517758","status":"passed","time":{"start":1720648366751,"stop":1720648366751,"duration":0}},{"uid":"e78e3317c476029","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21352//#testresult/e78e3317c476029","status":"passed","time":{"start":1720647469449,"stop":1720647469449,"duration":0}},{"uid":"8819a9071954c584","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21351//#testresult/8819a9071954c584","status":"passed","time":{"start":1720647304493,"stop":1720647304493,"duration":0}},{"uid":"f3b11fdef2372437","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21350//#testresult/f3b11fdef2372437","status":"passed","time":{"start":1720646951733,"stop":1720646951733,"duration":0}},{"uid":"9e2e077efe316d22","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21348//#testresult/9e2e077efe316d22","status":"passed","time":{"start":1720646550111,"stop":1720646550112,"duration":1}},{"uid":"92b59800b9633fc5","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21341//#testresult/92b59800b9633fc5","status":"passed","time":{"start":1720640018227,"stop":1720640018227,"duration":0}},{"uid":"5ebc9c743f9f6b52","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21340//#testresult/5ebc9c743f9f6b52","status":"passed","time":{"start":1720638027585,"stop":1720638027585,"duration":0}},{"uid":"8fff66dc4e004561","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21339//#testresult/8fff66dc4e004561","status":"passed","time":{"start":1720637367643,"stop":1720637367643,"duration":0}},{"uid":"84bac3111f89a2f2","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21338//#testresult/84bac3111f89a2f2","status":"passed","time":{"start":1720637236368,"stop":1720637236368,"duration":0}}]},"tags":[]},"source":"49870c94349d2dd6.json","parameterValues":["{'data': <10x100 sparse matrix of type '<class 'numpy.int16'>'\n\twith 0 stored elements in Compressed Sparse Row format>, 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"]}