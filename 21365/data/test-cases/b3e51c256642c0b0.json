{"uid":"b3e51c256642c0b0","name":"test_type_inference[parameters5]","fullName":"tests.unit.processing.test_type_conversion_utils#test_type_inference","historyId":"3332e2ba045f7bbdf5819fe313edfd74","time":{"start":1720651445655,"stop":1720651445655,"duration":0},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"patch_all","time":{"start":1720651386045,"stop":1720651386045,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"caplog","time":{"start":1720651445654,"stop":1720651445654,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0}],"afterStages":[{"name":"caplog::0","time":{"start":1720651445655,"stop":1720651445655,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0}],"labels":[{"name":"parentSuite","value":"tests.unit.processing"},{"name":"suite","value":"test_type_conversion_utils"},{"name":"host","value":"a8c7502adc05"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.processing.test_type_conversion_utils"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"parameters","value":"{'data': <10x100 sparse matrix of type '<class 'numpy.int8'>'\n\twith 0 stored elements in Compressed Sparse Row format>, 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":10,"unknown":0,"total":10},"items":[{"uid":"5fd88e55b803fad0","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21361//#testresult/5fd88e55b803fad0","status":"passed","time":{"start":1720648366713,"stop":1720648366713,"duration":0}},{"uid":"3a543f69d5417359","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21352//#testresult/3a543f69d5417359","status":"passed","time":{"start":1720647469410,"stop":1720647469410,"duration":0}},{"uid":"361a1464ea5b11ff","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21351//#testresult/361a1464ea5b11ff","status":"passed","time":{"start":1720647304455,"stop":1720647304455,"duration":0}},{"uid":"c9bd5b7372a86268","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21350//#testresult/c9bd5b7372a86268","status":"passed","time":{"start":1720646951696,"stop":1720646951696,"duration":0}},{"uid":"7bdaba8615a7a0c5","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21348//#testresult/7bdaba8615a7a0c5","status":"passed","time":{"start":1720646550073,"stop":1720646550073,"duration":0}},{"uid":"c1e49cd83fa60beb","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21341//#testresult/c1e49cd83fa60beb","status":"passed","time":{"start":1720640018189,"stop":1720640018189,"duration":0}},{"uid":"aa3c0890882d6368","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21340//#testresult/aa3c0890882d6368","status":"passed","time":{"start":1720638027546,"stop":1720638027546,"duration":0}},{"uid":"62cf5100d62ae5c8","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21339//#testresult/62cf5100d62ae5c8","status":"passed","time":{"start":1720637367604,"stop":1720637367605,"duration":1}},{"uid":"53f245665ad9116a","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21338//#testresult/53f245665ad9116a","status":"passed","time":{"start":1720637236330,"stop":1720637236331,"duration":1}}]},"tags":[]},"source":"b3e51c256642c0b0.json","parameterValues":["{'data': <10x100 sparse matrix of type '<class 'numpy.int8'>'\n\twith 0 stored elements in Compressed Sparse Row format>, 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"]}