{"uid":"a8a3f9d9ff7ebfa8","name":"test_type_inference[parameters9]","fullName":"tests.unit.processing.test_type_conversion_utils#test_type_inference","historyId":"3de380206237aa1b19a2a09e2b11f345","time":{"start":1720651445673,"stop":1720651445674,"duration":1},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"patch_all","time":{"start":1720651386045,"stop":1720651386045,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"caplog","time":{"start":1720651445673,"stop":1720651445673,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0}],"afterStages":[{"name":"caplog::0","time":{"start":1720651445674,"stop":1720651445674,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0}],"labels":[{"name":"parentSuite","value":"tests.unit.processing"},{"name":"suite","value":"test_type_conversion_utils"},{"name":"host","value":"a8c7502adc05"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.processing.test_type_conversion_utils"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"parameters","value":"{'data': <10x100 sparse matrix of type '<class 'numpy.uint8'>'\n\twith 0 stored elements in Compressed Sparse Row format>, 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":10,"unknown":0,"total":10},"items":[{"uid":"1432ca4e0d72c1d8","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21361//#testresult/1432ca4e0d72c1d8","status":"passed","time":{"start":1720648366732,"stop":1720648366732,"duration":0}},{"uid":"9398fb538dfc5a4","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21352//#testresult/9398fb538dfc5a4","status":"passed","time":{"start":1720647469430,"stop":1720647469430,"duration":0}},{"uid":"c55cd4c41f7483ed","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21351//#testresult/c55cd4c41f7483ed","status":"passed","time":{"start":1720647304474,"stop":1720647304474,"duration":0}},{"uid":"f85d097e56452330","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21350//#testresult/f85d097e56452330","status":"passed","time":{"start":1720646951715,"stop":1720646951715,"duration":0}},{"uid":"ba0b8cbd960def64","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21348//#testresult/ba0b8cbd960def64","status":"passed","time":{"start":1720646550092,"stop":1720646550092,"duration":0}},{"uid":"c7cb69a6a38dd860","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21341//#testresult/c7cb69a6a38dd860","status":"passed","time":{"start":1720640018208,"stop":1720640018208,"duration":0}},{"uid":"319c331c86916a39","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21340//#testresult/319c331c86916a39","status":"passed","time":{"start":1720638027566,"stop":1720638027566,"duration":0}},{"uid":"dc22d37b0ae3b9cd","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21339//#testresult/dc22d37b0ae3b9cd","status":"passed","time":{"start":1720637367624,"stop":1720637367624,"duration":0}},{"uid":"e3461d70a427594d","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21338//#testresult/e3461d70a427594d","status":"passed","time":{"start":1720637236349,"stop":1720637236350,"duration":1}}]},"tags":[]},"source":"a8a3f9d9ff7ebfa8.json","parameterValues":["{'data': <10x100 sparse matrix of type '<class 'numpy.uint8'>'\n\twith 0 stored elements in Compressed Sparse Row format>, 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"]}