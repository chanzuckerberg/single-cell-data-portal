{"uid":"308ec0f31237eab1","name":"test__gene_expression_rollup","fullName":"tests.unit.backend.wmg.api.test_expression_rollup.RollupExpressionsAcrossCellTypesTest#test__gene_expression_rollup","historyId":"81a0e7215eb7ea8729d4afa8e3e5d544","time":{"start":1683702340948,"stop":1683702346893,"duration":5945},"description":"\n        Test that the `rollup` function sums up relevant numeric values for gene expression for\n        each cell type from its descendant cell types for every (tissue, gene) combination\n        in the input expression dataframe.\n\n        The input:\n\n        1. A cell type ontology subgraph consisting of 4 cell types.\n        2. 2 tissues.\n        3. 2 genes.\n        4. A gene expression dataframe consisting of expression numeric values for each\n           (gene_ontology_term_id, tissue_ontology_term_id, cell_type_ontology_term_id) tuple.\n        5. The gene expression datafram also holds total cell counts per tissue_ontology_term_id.\n           This value is held in a column called `n_cells_tissue`.\n        6. A cell counts dataframe that consists of cell counts for each\n           (tissue_ontology_term_id, cell_type_ontology_term_id) tuple.\n        7. We set the `n_cells_tissue` column values to 10_000_000 for all rows\n           in the gene expression dataframe.\n        8. We set all other numeric column values to `1` in the gene expression dataframe.\n\n        The expected output:\n\n        1. A rolled up gene expression dataframe.\n        2. A rolled up cell counts dataframe.\n        3. Assert that `n_cells_tissue` column value in the rolled up gene expression dataframe\n           does not change for all rows because it should not be rolled up the cell type ontology\n           ancestor path.\n        4. Assert that other numeric column values (i.e the columns that are not `n_cells_tissue`)\n           in the rolled up gene expression dataframe sum up to the correct value for each cell type\n           for every (tissue, gene) combination.\n        5. Assert that the cell counts in the rolled up cell counts dataframe sum up to the correct\n           value for each cell type for every (tissue, cell_type) combination.\n        ","descriptionHtml":"<pre><code>    Test that the `rollup` function sums up relevant numeric values for gene expression for\n    each cell type from its descendant cell types for every (tissue, gene) combination\n    in the input expression dataframe.\n\n    The input:\n\n    1. A cell type ontology subgraph consisting of 4 cell types.\n    2. 2 tissues.\n    3. 2 genes.\n    4. A gene expression dataframe consisting of expression numeric values for each\n       (gene_ontology_term_id, tissue_ontology_term_id, cell_type_ontology_term_id) tuple.\n    5. The gene expression datafram also holds total cell counts per tissue_ontology_term_id.\n       This value is held in a column called `n_cells_tissue`.\n    6. A cell counts dataframe that consists of cell counts for each\n       (tissue_ontology_term_id, cell_type_ontology_term_id) tuple.\n    7. We set the `n_cells_tissue` column values to 10_000_000 for all rows\n       in the gene expression dataframe.\n    8. We set all other numeric column values to `1` in the gene expression dataframe.\n\n    The expected output:\n\n    1. A rolled up gene expression dataframe.\n    2. A rolled up cell counts dataframe.\n    3. Assert that `n_cells_tissue` column value in the rolled up gene expression dataframe\n       does not change for all rows because it should not be rolled up the cell type ontology\n       ancestor path.\n    4. Assert that other numeric column values (i.e the columns that are not `n_cells_tissue`)\n       in the rolled up gene expression dataframe sum up to the correct value for each cell type\n       for every (tissue, gene) combination.\n    5. Assert that the cell counts in the rolled up cell counts dataframe sum up to the correct\n       value for each cell type for every (tissue, cell_type) combination.\n</code></pre>\n","status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_RollupExpressionsAcrossCellTypesTest","time":{"start":1683702340899,"stop":1683702340900,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"afterStages":[{"name":"_unittest_setUpClass_fixture_RollupExpressionsAcrossCellTypesTest::0","time":{"start":1683702347135,"stop":1683702347136,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests.unit.backend.wmg.api"},{"name":"suite","value":"test_expression_rollup"},{"name":"subSuite","value":"RollupExpressionsAcrossCellTypesTest"},{"name":"host","value":"d56da2577929"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.backend.wmg.api.test_expression_rollup"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":[]},"source":"308ec0f31237eab1.json","parameterValues":[]}