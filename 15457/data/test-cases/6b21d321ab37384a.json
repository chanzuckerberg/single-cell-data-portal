{"uid":"6b21d321ab37384a","name":"test__add_missing_combinations_to_gene_expression_df_for_rollup","fullName":"tests.unit.backend.wmg.api.common.test_rollup.TestHighLevelRollupHelperFunctions#test__add_missing_combinations_to_gene_expression_df_for_rollup","historyId":"c79831c57eaf87a683382edb51f43a00","time":{"start":1694186544867,"stop":1694186544910,"duration":43},"description":"\n        test that the `_add_missing_combinations_to_gene_expression_df_for_rollup` function works as expected\n        this function is used to add missing (tissue, cell type) combinations to the expression dataframe\n        so that the expression dataframe can be rolled up correctly.\n\n        the cell counts dataframe has 100 cell types, 60 of which have expression data\n        the goal of this test is to make sure that `_add_missing_combinations_to_gene_expression_df_for_rollup`\n        adds the missing (tissue, cell type) combinations for each gene to th expression dataframe.\n\n        there will be (100 cell types) * (2 tissues) = 200 rows in the cell counts dataframe\n        there will be (60 cell types) * (2 tissues) * (3 genes) = 360 rows in the expression dataframe\n        there will be (100 cell types) * (2 tissues) * (3 genes) = 600 rows in the expected expression dataframe\n\n\n        the input expression dataframe will have 1 for all numeric columns, excluding n_cells_tissue.\n        because we don't want to roll up the n_cells_tissue column, we set it to 100 for all rows and check\n        that it stays 100 after adding the missing combinations.\n\n        the expected expression dataframe will have the same rows as the input dataframe, with new rows added\n        that have 0 for all numeric columns, excluding n_cells_tissue, which stays 100.\n        ","descriptionHtml":"<pre><code>    test that the `_add_missing_combinations_to_gene_expression_df_for_rollup` function works as expected\n    this function is used to add missing (tissue, cell type) combinations to the expression dataframe\n    so that the expression dataframe can be rolled up correctly.\n\n    the cell counts dataframe has 100 cell types, 60 of which have expression data\n    the goal of this test is to make sure that `_add_missing_combinations_to_gene_expression_df_for_rollup`\n    adds the missing (tissue, cell type) combinations for each gene to th expression dataframe.\n\n    there will be (100 cell types) * (2 tissues) = 200 rows in the cell counts dataframe\n    there will be (60 cell types) * (2 tissues) * (3 genes) = 360 rows in the expression dataframe\n    there will be (100 cell types) * (2 tissues) * (3 genes) = 600 rows in the expected expression dataframe\n\n\n    the input expression dataframe will have 1 for all numeric columns, excluding n_cells_tissue.\n    because we don't want to roll up the n_cells_tissue column, we set it to 100 for all rows and check\n    that it stays 100 after adding the missing combinations.\n\n    the expected expression dataframe will have the same rows as the input dataframe, with new rows added\n    that have 0 for all numeric columns, excluding n_cells_tissue, which stays 100.\n</code></pre>\n","status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestHighLevelRollupHelperFunctions","time":{"start":1694186544866,"stop":1694186544866,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"afterStages":[{"name":"_unittest_setUpClass_fixture_TestHighLevelRollupHelperFunctions::0","time":{"start":1694186544910,"stop":1694186544910,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests.unit.backend.wmg.api.common"},{"name":"suite","value":"test_rollup"},{"name":"subSuite","value":"TestHighLevelRollupHelperFunctions"},{"name":"host","value":"7c86cb0ec74a"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.backend.wmg.api.common.test_rollup"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":1435,"unknown":0,"total":1435},"items":[{"uid":"b80a7706bdb2404","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/15456//#testresult/b80a7706bdb2404","status":"passed","time":{"start":1694184733070,"stop":1694184733104,"duration":34}},{"uid":"679bb9e6ddb29ece","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/15454//#testresult/679bb9e6ddb29ece","status":"passed","time":{"start":1694183905968,"stop":1694183906003,"duration":35}},{"uid":"9163874960b370d4","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/15440//#testresult/9163874960b370d4","status":"passed","time":{"start":1694128345693,"stop":1694128345731,"duration":38}},{"uid":"e04c522be4e21faa","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/15450//#testresult/e04c522be4e21faa","status":"passed","time":{"start":1694161431639,"stop":1694161431675,"duration":36}},{"uid":"6d008aba1e64dcb3","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/15449//#testresult/6d008aba1e64dcb3","status":"passed","time":{"start":1694160906372,"stop":1694160906408,"duration":36}},{"uid":"7941d2ae1802b509","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/15448//#testresult/7941d2ae1802b509","status":"passed","time":{"start":1694160018952,"stop":1694160018994,"duration":42}},{"uid":"705d14266136107a","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/15447//#testresult/705d14266136107a","status":"passed","time":{"start":1694159846287,"stop":1694159846331,"duration":44}},{"uid":"163e1b91368bb487","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/15446//#testresult/163e1b91368bb487","status":"passed","time":{"start":1694139378830,"stop":1694139378865,"duration":35}},{"uid":"6b053c0d940b4a24","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/15444//#testresult/6b053c0d940b4a24","status":"passed","time":{"start":1694133072387,"stop":1694133072429,"duration":42}},{"uid":"c80775ff13055605","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/15442//#testresult/c80775ff13055605","status":"passed","time":{"start":1694130665114,"stop":1694130665149,"duration":35}},{"uid":"64a3e62dd53a58cf","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/15441//#testresult/64a3e62dd53a58cf","status":"passed","time":{"start":1694129177278,"stop":1694129177338,"duration":60}},{"uid":"692b1dc10bafc53f","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/15439//#testresult/692b1dc10bafc53f","status":"passed","time":{"start":1694128070816,"stop":1694128070852,"duration":36}},{"uid":"982edf61eb1f0508","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/15438//#testresult/982edf61eb1f0508","status":"passed","time":{"start":1694127237475,"stop":1694127237509,"duration":34}},{"uid":"51e4fdcd6bff34f","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/15432//#testresult/51e4fdcd6bff34f","status":"passed","time":{"start":1694126021572,"stop":1694126021608,"duration":36}},{"uid":"2ec804f81f553f5a","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/15433//#testresult/2ec804f81f553f5a","status":"passed","time":{"start":1694126041262,"stop":1694126041296,"duration":34}},{"uid":"e614044537d65f09","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/15431//#testresult/e614044537d65f09","status":"passed","time":{"start":1694125610754,"stop":1694125610796,"duration":42}},{"uid":"57d9332452517ae9","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/15430//#testresult/57d9332452517ae9","status":"passed","time":{"start":1694125469200,"stop":1694125469248,"duration":48}},{"uid":"e19c1bd7680247f","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/15429//#testresult/e19c1bd7680247f","status":"passed","time":{"start":1694124728631,"stop":1694124728664,"duration":33}},{"uid":"4b02846986ef45dc","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/15427//#testresult/4b02846986ef45dc","status":"passed","time":{"start":1694123839424,"stop":1694123839457,"duration":33}},{"uid":"8e8e2fc093181407","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/15426//#testresult/8e8e2fc093181407","status":"passed","time":{"start":1694123743865,"stop":1694123743913,"duration":48}}]},"tags":[]},"source":"6b21d321ab37384a.json","parameterValues":[]}