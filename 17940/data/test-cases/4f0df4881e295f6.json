{"uid":"4f0df4881e295f6","name":"test_type_inference[parameters8]","fullName":"tests.unit.backend.layers.utils.test_type_conversion_utils#test_type_inference","historyId":"d75c21ab151f8b19b832f04fd88517a2","time":{"start":1702928465634,"stop":1702928465634,"duration":0},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"patch_all","time":{"start":1702928449901,"stop":1702928449902,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"caplog","time":{"start":1702928465633,"stop":1702928465633,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"caplog::0","time":{"start":1702928465635,"stop":1702928465635,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.backend.layers.utils"},{"name":"suite","value":"test_type_conversion_utils"},{"name":"host","value":"3e3bb54ba1d8"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.backend.layers.utils.test_type_conversion_utils"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"parameters","value":"{'data': UInt64Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n             ...\n             222, 223, 224, 225, 226, 227, 228, 229, 230, 231],\n            dtype='uint64', length=1000), 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":9,"unknown":0,"total":9},"items":[{"uid":"c987bf944d8443f","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/17939//#testresult/c987bf944d8443f","status":"passed","time":{"start":1702928455056,"stop":1702928455057,"duration":1}},{"uid":"963f609f50361f08","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/17938//#testresult/963f609f50361f08","status":"passed","time":{"start":1702927925960,"stop":1702927925960,"duration":0}},{"uid":"ba2b7bda9275457d","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/17937//#testresult/ba2b7bda9275457d","status":"passed","time":{"start":1702927371903,"stop":1702927371904,"duration":1}},{"uid":"b0a1a6fa554c6d72","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/17936//#testresult/b0a1a6fa554c6d72","status":"passed","time":{"start":1702926366243,"stop":1702926366244,"duration":1}},{"uid":"200aa4ab0cbe0ace","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/17935//#testresult/200aa4ab0cbe0ace","status":"passed","time":{"start":1702925518950,"stop":1702925518950,"duration":0}},{"uid":"5401f1b22a941","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/17934//#testresult/5401f1b22a941","status":"passed","time":{"start":1702925452736,"stop":1702925452737,"duration":1}},{"uid":"1f634653205e8887","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/17933//#testresult/1f634653205e8887","status":"passed","time":{"start":1702924127908,"stop":1702924127909,"duration":1}},{"uid":"cb7ca9ab0f0b8b83","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/17882//#testresult/cb7ca9ab0f0b8b83","status":"passed","time":{"start":1702513219138,"stop":1702513219139,"duration":1}}]},"tags":[]},"source":"4f0df4881e295f6.json","parameterValues":["{'data': UInt64Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n             ...\n             222, 223, 224, 225, 226, 227, 228, 229, 230, 231],\n            dtype='uint64', length=1000), 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"]}