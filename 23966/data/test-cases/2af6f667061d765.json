{"uid":"2af6f667061d765","name":"test_type_inference[parameters43]","fullName":"tests.unit.processing.test_type_conversion_utils#test_type_inference","historyId":"14a0d19db807bd3d81ac0df45ee9c826","time":{"start":1744334800369,"stop":1744334800369,"duration":0},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"patch_all","time":{"start":1744334790187,"stop":1744334790187,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"caplog","time":{"start":1744334800368,"stop":1744334800368,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"passed","steps":[],"attachments":[{"uid":"d817ffe7b8e3f8c0","name":"log","source":"d817ffe7b8e3f8c0.txt","type":"text/plain","size":341},{"uid":"533d9b2a11128742","name":"stdout","source":"533d9b2a11128742.txt","type":"text/plain","size":831}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"caplog::0","time":{"start":1744334800370,"stop":1744334800370,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.processing"},{"name":"suite","value":"test_type_conversion_utils"},{"name":"host","value":"8ea8a4f4bd97"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.processing.test_type_conversion_utils"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"parameters","value":"{'data': array([ nan, -inf,  -1.,  -0.,   0.,   0.,   1.,  inf,  nan]), 'expected_encoding_dtype': <class 'numpy.float32'>, 'expected_schema_hint': {'type': 'float32'}, 'logs': {'level': 30, 'output': 'may lose precision'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":8,"unknown":0,"total":8},"items":[{"uid":"8fa98c7f0548f94f","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23965//#testresult/8fa98c7f0548f94f","status":"passed","time":{"start":1744328197673,"stop":1744328197673,"duration":0}},{"uid":"4ded994b1ea32ebc","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23964//#testresult/4ded994b1ea32ebc","status":"passed","time":{"start":1744326572612,"stop":1744326572613,"duration":1}},{"uid":"37d7819492fe33f7","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23961//#testresult/37d7819492fe33f7","status":"passed","time":{"start":1744324473238,"stop":1744324473239,"duration":1}},{"uid":"dc64b0065c552c9","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23954//#testresult/dc64b0065c552c9","status":"passed","time":{"start":1744324189412,"stop":1744324189412,"duration":0}},{"uid":"f8157fcfb0821ab8","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23951//#testresult/f8157fcfb0821ab8","status":"passed","time":{"start":1744322847493,"stop":1744322847494,"duration":1}},{"uid":"184984e501d15466","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23950//#testresult/184984e501d15466","status":"passed","time":{"start":1744317734449,"stop":1744317734450,"duration":1}},{"uid":"790485e0a842fb8f","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23949//#testresult/790485e0a842fb8f","status":"passed","time":{"start":1744316549268,"stop":1744316549269,"duration":1}}]},"tags":[]},"source":"2af6f667061d765.json","parameterValues":["{'data': array([ nan, -inf,  -1.,  -0.,   0.,   0.,   1.,  inf,  nan]), 'expected_encoding_dtype': <class 'numpy.float32'>, 'expected_schema_hint': {'type': 'float32'}, 'logs': {'level': 30, 'output': 'may lose precision'}}"]}