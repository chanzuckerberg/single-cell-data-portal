{"uid":"9c24aa8267e9624c","name":"test_type_inference[parameters80]","fullName":"tests.unit.processing.test_type_conversion_utils#test_type_inference","historyId":"b00eeaa763a4169421c6afe3f91db818","time":{"start":1744334800527,"stop":1744334800528,"duration":1},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"patch_all","time":{"start":1744334790187,"stop":1744334790187,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"caplog","time":{"start":1744334800526,"stop":1744334800526,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"passed","steps":[],"attachments":[{"uid":"2c7cf8265fd8163b","name":"log","source":"2c7cf8265fd8163b.txt","type":"text/plain","size":341},{"uid":"672865a3d58a4c85","name":"stdout","source":"672865a3d58a4c85.txt","type":"text/plain","size":831}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"caplog::0","time":{"start":1744334800528,"stop":1744334800528,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.processing"},{"name":"suite","value":"test_type_conversion_utils"},{"name":"host","value":"8ea8a4f4bd97"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.processing.test_type_conversion_utils"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"parameters","value":"{'data': 0      0\n1    NaN\n2      2\ndtype: category\nCategories (2, int32): [0, 2], 'expected_encoding_dtype': <class 'numpy.float32'>, 'expected_schema_hint': {'type': 'categorical'}, 'logs': {'level': 30, 'output': 'may lose precision'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":8,"unknown":0,"total":8},"items":[{"uid":"997b1685ab27f787","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23965//#testresult/997b1685ab27f787","status":"passed","time":{"start":1744328197830,"stop":1744328197831,"duration":1}},{"uid":"8c1c729d9122b18a","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23964//#testresult/8c1c729d9122b18a","status":"passed","time":{"start":1744326572770,"stop":1744326572771,"duration":1}},{"uid":"4477f4ea72ce519b","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23961//#testresult/4477f4ea72ce519b","status":"passed","time":{"start":1744324473397,"stop":1744324473398,"duration":1}},{"uid":"28a64ae32b805675","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23954//#testresult/28a64ae32b805675","status":"passed","time":{"start":1744324189573,"stop":1744324189574,"duration":1}},{"uid":"52a9712ff1a4ac45","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23951//#testresult/52a9712ff1a4ac45","status":"passed","time":{"start":1744322847657,"stop":1744322847658,"duration":1}},{"uid":"978fbb8e2d308656","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23950//#testresult/978fbb8e2d308656","status":"passed","time":{"start":1744317734606,"stop":1744317734607,"duration":1}},{"uid":"19cbbfc2a30776f1","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23949//#testresult/19cbbfc2a30776f1","status":"passed","time":{"start":1744316549426,"stop":1744316549427,"duration":1}}]},"tags":[]},"source":"9c24aa8267e9624c.json","parameterValues":["{'data': 0      0\n1    NaN\n2      2\ndtype: category\nCategories (2, int32): [0, 2], 'expected_encoding_dtype': <class 'numpy.float32'>, 'expected_schema_hint': {'type': 'categorical'}, 'logs': {'level': 30, 'output': 'may lose precision'}}"]}