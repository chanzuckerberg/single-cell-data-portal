{"uid":"3c1b97bf8e9802f5","name":"test_type_inference[parameters102]","fullName":"tests.unit.backend.layers.utils.test_type_conversion_utils#test_type_inference","historyId":"bd6bb36a062eca934b7d44be79609512","time":{"start":1702927926386,"stop":1702927926386,"duration":0},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"patch_all","time":{"start":1702927911043,"stop":1702927911043,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"caplog","time":{"start":1702927926384,"stop":1702927926384,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"passed","steps":[],"attachments":[{"uid":"83a35c73b5969e0b","name":"log","source":"83a35c73b5969e0b.txt","type":"text/plain","size":341},{"uid":"7e6c4b5b8e4d4206","name":"stderr","source":"7e6c4b5b8e4d4206.txt","type":"text/plain","size":852}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"caplog::0","time":{"start":1702927926387,"stop":1702927926387,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.backend.layers.utils"},{"name":"suite","value":"test_type_conversion_utils"},{"name":"host","value":"a7575d93afee"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.backend.layers.utils.test_type_conversion_utils"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"parameters","value":"{'data': [0.0, 1.0, NaN]\nCategories (2, float64): [0.0, 1.0], 'expected_encoding_dtype': <class 'numpy.float32'>, 'expected_schema_hint': {'type': 'categorical'}, 'logs': {'level': 30, 'output': 'may lose precision'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"f50e56f1ef71f516","status":"passed","time":{"start":1702927926374,"stop":1702927926375,"duration":1}},{"uid":"35997f0582db5e5b","status":"passed","time":{"start":1702927926363,"stop":1702927926364,"duration":1}}],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":7,"unknown":0,"total":7},"items":[{"uid":"5bd7086a74aa21a5","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/17937//#testresult/5bd7086a74aa21a5","status":"passed","time":{"start":1702927372352,"stop":1702927372353,"duration":1}},{"uid":"5070d7ce3e6bad06","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/17936//#testresult/5070d7ce3e6bad06","status":"passed","time":{"start":1702926366670,"stop":1702926366670,"duration":0}},{"uid":"8bfb85f7193f21e","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/17935//#testresult/8bfb85f7193f21e","status":"passed","time":{"start":1702925519376,"stop":1702925519377,"duration":1}},{"uid":"551f35c37b1e807d","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/17934//#testresult/551f35c37b1e807d","status":"passed","time":{"start":1702925453174,"stop":1702925453175,"duration":1}},{"uid":"9ff0a7ac168d49cd","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/17933//#testresult/9ff0a7ac168d49cd","status":"passed","time":{"start":1702924128338,"stop":1702924128338,"duration":0}},{"uid":"917dc232077c3a0b","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/17882//#testresult/917dc232077c3a0b","status":"passed","time":{"start":1702513219559,"stop":1702513219560,"duration":1}}]},"tags":[]},"source":"3c1b97bf8e9802f5.json","parameterValues":["{'data': [0.0, 1.0, NaN]\nCategories (2, float64): [0.0, 1.0], 'expected_encoding_dtype': <class 'numpy.float32'>, 'expected_schema_hint': {'type': 'categorical'}, 'logs': {'level': 30, 'output': 'may lose precision'}}"]}