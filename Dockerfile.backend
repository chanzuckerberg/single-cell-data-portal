# syntax=docker/dockerfile:1
# Keep this syntax directive! It's used to enable Docker BuildKit

# Based on https://gist.github.com/usr-ein/c42d98abca3cb4632ab0c2c6aff8c88a

ARG BASE_TAG=branch-main

################################
# PYTHON-BASE
# Sets up all our shared environment variables
################################
FROM ubuntu:22.04 as python-base
    # python
ENV PYTHONUNBUFFERED=1 \
    # prevents python creating .pyc files
    PYTHONDONTWRITEBYTECODE=1 \
    \
    # pip
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    \
    # poetry
    # https://python-poetry.org/docs/configuration/#using-environment-variables
    POETRY_VERSION=1.7.1 \
    # make poetry install to this location
    POETRY_HOME="/opt/poetry" \
    # make poetry create the virtual environment in the project's root
    # it gets named `.venv`
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    # do not ask any interactive question
    POETRY_NO_INTERACTION=1 \
    \
    # paths
    # this is where our requirements + virtual environment will live
    PYSETUP_PATH="/opt/pysetup" \
    VENV_PATH="/opt/pysetup/.venv"

ENV APP_NAME=corpora-api \
	EXPORT_ENV_VARS_TO_LAMBDA="APP_NAME DEPLOYMENT_STAGE" \
	LC_ALL=C.UTF-8 \
	DEBIAN_FRONTEND=noninteractive \
	# TODO: Fix problem with invoking gunicorn under ddtrace-run. Also make sure when
	# DEPLOYMENT_STAGE=test, gunicorn is not invoked under ddtrace-run.
	# See ticket: https://github.com/chanzuckerberg/single-cell-data-portal/issues/5819
	DD_GEVENT_PATCH_ALL=true

# prepend poetry and venv to path
ENV PATH="$POETRY_HOME/bin:$VENV_PATH/bin:$PATH"


################################
# BUILDER-BASE
# Used to build deps + create our virtual environment
################################
FROM python-base as builder-base
RUN apt-get update \
    && apt-get install --no-install-recommends -y \
        # deps for installing poetry
        curl \
        # deps for building python deps
        build-essential

# pre-existing
RUN apt-get install -y python3 libhdf5-dev python3-h5py gettext moreutils libxml2-dev python3-dev python3-pip zlib1g-dev python3-requests python3-aiohttp llvm jq && \
	rm -rf /var/lib/apt/lists/*
# install poetry - respects $POETRY_VERSION & $POETRY_HOME
# The --mount will mount the buildx cache directory to where
# Poetry and Pip store their cache so that they can re-use it
RUN --mount=type=cache,target=/root/.cache \
    curl -sSL https://install.python-poetry.org | python3 -

# copy project requirement files here to ensure they will be cached.
WORKDIR $PYSETUP_PATH
COPY python_dependencies/backend/ ./

# install runtime deps - uses $POETRY_VIRTUALENVS_IN_PROJECT internally
RUN --mount=type=cache,target=/root/.cache \
    poetry install --with=dev

# Install utilities to /single-cell-data-portal so we can run db migrations.
ARG HAPPY_BRANCH="unknown"
ARG HAPPY_COMMIT=""
LABEL branch=${HAPPY_BRANCH}
LABEL commit=${HAPPY_COMMIT}
ENV COMMIT_SHA=${HAPPY_COMMIT}
ENV COMMIT_BRANCH=${HAPPY_BRANCH}

# For Datadog <-> gunicorn integration
# https://docs.datadoghq.com/containers/docker/integrations/?tab=docker#configuration
# https://docs.datadoghq.com/integrations/gunicorn/#metric-collection
LABEL "com.datadoghq.ad.check_names"='["gunicorn"]'
LABEL "com.datadoghq.ad.init_configs"='[{}]'
LABEL "com.datadoghq.ad.instances"='[{ "proc_name": "backend.api_server.app:app" }]'
EXPOSE 5000

WORKDIR /single-cell-data-portal
COPY tests /single-cell-data-portal/tests
COPY scripts /single-cell-data-portal/scripts
COPY backend /single-cell-data-portal/backend

################################
# LOCAL-DEV
# setup for local development
################################
FROM builder-base as local-dev

# Use locally-generated cert for HTTPS in containerized local environment; deployed envs use ELB
ENV HTTPS_CERT_AND_KEY="--certfile /tmp/pkcs12/server.crt --keyfile /tmp/pkcs12/server.key"

# Note: Using just 1 worker for dev/test env. Multiple workers are used in deployment envs, as defined in Terraform code.
# Note: keep-alive timeout should always be greater than the idle timeout of the load balancer (60 seconds)
ENTRYPOINT ["gunicorn", "${HTTPS_CERT_AND_KEY}", "--worker-class", "gevent", -"-workers", "1", "--bind", "0.0.0.0:5000", "backend.api_server.app:app"," --max-requests", "10000", "--timeout", "180", "--keep-alive", "61", "--log-level", "info"]
