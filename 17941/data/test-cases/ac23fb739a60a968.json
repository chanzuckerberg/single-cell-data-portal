{"uid":"ac23fb739a60a968","name":"test_type_inference[parameters37]","fullName":"tests.unit.backend.layers.utils.test_type_conversion_utils#test_type_inference","historyId":"a64f965f38211a1fdac03d83a7278722","time":{"start":1702928944453,"stop":1702928944453,"duration":0},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"patch_all","time":{"start":1702928929041,"stop":1702928929041,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"caplog","time":{"start":1702928944452,"stop":1702928944452,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"caplog::0","time":{"start":1702928944454,"stop":1702928944454,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.backend.layers.utils"},{"name":"suite","value":"test_type_conversion_utils"},{"name":"host","value":"c8c1b9ed13a6"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.backend.layers.utils.test_type_conversion_utils"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"parameters","value":"{'data': array([ nan, -inf,  -1.,  -0.,   0.,   0.,   1.,  inf,  nan],\n      dtype=float16), 'expected_encoding_dtype': <class 'numpy.float32'>, 'expected_schema_hint': {'type': 'float32'}, 'logs': None}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":10,"unknown":0,"total":10},"items":[{"uid":"a5628da1e7b883f4","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/17940//#testresult/a5628da1e7b883f4","status":"passed","time":{"start":1702928465771,"stop":1702928465771,"duration":0}},{"uid":"1f2d3696d0b570e3","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/17939//#testresult/1f2d3696d0b570e3","status":"passed","time":{"start":1702928455192,"stop":1702928455192,"duration":0}},{"uid":"46611b593eff66","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/17938//#testresult/46611b593eff66","status":"passed","time":{"start":1702927926095,"stop":1702927926096,"duration":1}},{"uid":"2446d949370925a6","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/17937//#testresult/2446d949370925a6","status":"passed","time":{"start":1702927372045,"stop":1702927372045,"duration":0}},{"uid":"243c094047e6e1ff","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/17936//#testresult/243c094047e6e1ff","status":"passed","time":{"start":1702926366381,"stop":1702926366381,"duration":0}},{"uid":"d3776f72e6b8ea8e","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/17935//#testresult/d3776f72e6b8ea8e","status":"passed","time":{"start":1702925519085,"stop":1702925519085,"duration":0}},{"uid":"562563d2a010a0f9","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/17934//#testresult/562563d2a010a0f9","status":"passed","time":{"start":1702925452872,"stop":1702925452873,"duration":1}},{"uid":"5a4037b4b6586b98","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/17933//#testresult/5a4037b4b6586b98","status":"passed","time":{"start":1702924128045,"stop":1702924128045,"duration":0}},{"uid":"116d0d4c26a75a0e","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/17882//#testresult/116d0d4c26a75a0e","status":"passed","time":{"start":1702513219270,"stop":1702513219270,"duration":0}}]},"tags":[]},"source":"ac23fb739a60a968.json","parameterValues":["{'data': array([ nan, -inf,  -1.,  -0.,   0.,   0.,   1.,  inf,  nan],\n      dtype=float16), 'expected_encoding_dtype': <class 'numpy.float32'>, 'expected_schema_hint': {'type': 'float32'}, 'logs': None}"]}