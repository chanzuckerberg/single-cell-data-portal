name: Deploy Happy

on: deployment

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  DOCKER_REPO: ${{ secrets.ECR_REPO }}/

jobs:
  upgrade:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 15
      - name: Configure AWS Prod Credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: github.event.deployment.environment == 'prod'
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_PROD_ROLE_TO_ASSUME }}
          role-duration-seconds: 2700
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: github.event.deployment.environment != 'prod'
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 2700
      # Login to ECR needed solely to be able to retrieve cached layers
      - name: Login to Prod ECR
        uses: docker/login-action@v1
        if: github.event.deployment.environment == 'prod'
        with:
          registry: ${{ secrets.ECR_REPO_PROD }}
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REPO }}
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.deployment.sha }}
      - uses: avakar/set-deployment-status@v1
        with:
          state: in_progress
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Update deployment
        uses: chanzuckerberg/github-actions/.github/actions/deploy-happy-stack@89b77fd9a74df0e29ed3cc2057c23b9d73011574
        with:
          tfe-token: ${{ secrets.TFE_TOKEN }}
          stack-name: ${{ github.event.deployment.environment }}stack
          happy_version: "0.28.0"
          operation: update
          tag: ${{ github.event.deployment.payload.tag }}
          env: ${{ github.event.deployment.environment }}
      - name: Invalidate CloudFront
        env:
          DEPLOYMENT_STAGE: ${{ github.event.deployment.environment }}
        run: |
          if [ "${DEPLOYMENT_STAGE}" == "stage" ]; then
            DOMAIN_NAME=public-frontend.stage.single-cell.czi.technology
            ALIAS=cellxgene.staging.single-cell.czi.technology
          elif [ "${DEPLOYMENT_STAGE}" == "prod" ]; then
            DOMAIN_NAME=public-frontend.production.single-cell.czi.technology
            ALIAS=cellxgene.cziscience.com
          else
            DOMAIN_NAME=public-frontend.${DEPLOYMENT_STAGE}.single-cell.czi.technology
            ALIAS=cellxgene.${DEPLOYMENT_STAGE}.single-cell.czi.technology
          fi
          DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[*].{id:Id,domain_name:Origins.Items[*].DomainName,alias:Aliases.Items[0]}[?contains(domain_name,'${DOMAIN_NAME}')&&alias=='${ALIAS}'].id" --output text)
          aws cloudfront create-invalidation --distribution-id ${DISTRIBUTION_ID} --paths /index.html
      ### Need to write success failure way because Github API doesn't allow doing
      ### "if: always(), state: ${{ success() }}:
      - name: Set deployment status to failure if errors
        uses: avakar/set-deployment-status@v1
        if: failure()
        with:
          state: failure
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,commit,author,eventName,workflow,job,mention
          mention: "here"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: failure() && github.ref == 'refs/heads/main'

  smoke-test:
    runs-on: ubuntu-20.04
    needs:
      - upgrade
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 15
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.deployment.sha }}
      - name: Configure AWS Prod Credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: github.event.deployment.environment == 'prod'
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_PROD_ROLE_TO_ASSUME }}
          role-duration-seconds: 2700
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: github.event.deployment.environment != 'prod'
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 2700
      - name: Run Smoke Tests
        working-directory: frontend
        env:
          DEPLOYMENT_STAGE: ${{ github.event.deployment.environment }}
        run: |
          npm ci
          npx playwright install --with-deps
          if [ "${DEPLOYMENT_STAGE}" == "stage" ]; then
            export DEPLOYMENT_STAGE=staging
          fi
          cp src/configs/${DEPLOYMENT_STAGE}.js src/configs/configs.js
          DEBUG=pw:api npm run e2e-${DEPLOYMENT_STAGE}
      ### Need to write success failure way because Github API doesn't allow doing
      ### "if: always(), state: ${{ success() }}:
      - name: Set deployment status to success if no errors
        uses: avakar/set-deployment-status@v1
        with:
          state: success
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set deployment status to failure if errors
        uses: avakar/set-deployment-status@v1
        if: failure()
        with:
          state: failure
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  functional-test:
    runs-on: ubuntu-20.04
    needs:
      - upgrade
    steps:
      - name: Configure AWS Prod Credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: github.event.deployment.environment == 'prod'
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_PROD_ROLE_TO_ASSUME }}
          role-duration-seconds: 2700
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: github.event.deployment.environment != 'prod'
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 2700
      # Login to ECR needed solely to be able to retrieve cached layers
      - name: Login to Prod ECR
        uses: docker/login-action@v1
        if: github.event.deployment.environment == 'prod'
        with:
          registry: ${{ secrets.ECR_REPO_PROD }}
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REPO }}
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.deployment.sha }}
      - name: Run functional test
        env:
          TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
          DEPLOYMENT_STAGE: ${{ github.event.deployment.environment }}
        if: github.event.deployment.environment != 'prod'
        run: |
          echo "DOCKER_REPO=${DOCKER_REPO}" > .env.ecr
          mkdir -p .local/bin
          curl -Ls https://github.com/segmentio/chamber/releases/download/v2.9.1/chamber-v2.9.1-linux-amd64 > .local/bin/chamber &&
          chmod +x .local/bin/chamber
          PATH="$PATH:$(pwd)/.local/bin"
          if [ "${DEPLOYMENT_STAGE}" == "stage" ]; then
            export DEPLOYMENT_STAGE=staging
          fi
          echo DEPLOYMENT_STAGE ${DEPLOYMENT_STAGE}
          docker-compose up --no-deps -d backend
          BOTO_ENDPOINT_URL= make local-functional-test
      ### Need to write success failure way because Github API doesn't allow doing
      ### "if: always(), state: ${{ success() }}:
      - name: Set deployment status to success if no errors
        uses: avakar/set-deployment-status@v1
        with:
          state: success
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set deployment status to failure if errors
        uses: avakar/set-deployment-status@v1
        if: failure()
        with:
          state: failure
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  performance-test:
    runs-on: ubuntu-20.04
    needs:
      - upgrade
    steps:
      - name: Configure AWS Prod Credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: github.event.deployment.environment == 'prod'
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_PROD_ROLE_TO_ASSUME }}
          role-duration-seconds: 2700
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: github.event.deployment.environment != 'prod'
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 2700
      # Login to ECR needed solely to be able to retrieve cached layers
      - name: Login to Prod ECR
        uses: docker/login-action@v1
        if: github.event.deployment.environment == 'prod'
        with:
          registry: ${{ secrets.ECR_REPO_PROD }}
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REPO }}
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.deployment.sha }}
      - name: Run performance test
        env:
          TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
          DEPLOYMENT_STAGE: ${{ github.event.deployment.environment }}
        if: github.event.deployment.environment == 'prod'
        run: |
          echo "DOCKER_REPO=${DOCKER_REPO}" > .env.ecr
          echo DEPLOYMENT_STAGE ${DEPLOYMENT_STAGE}
          make prod-performance-test

  status:
    runs-on: ubuntu-20.04
    needs:
      - performance-test
      - smoke-test
      - functional-test
    steps:
      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,commit,author,eventName,workflow,job,mention
          mention: "here"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: failure() && github.ref == 'refs/heads/main'
