name: Push Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches: "*"

env:
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  DEPLOYMENT_STAGE: test
  # Force using BuildKit instead of normal Docker, required so that metadata
  # is written/read to allow us to use layers of previous builds as cache.
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  DOCKER_REPO: ${{ secrets.ECR_REPO }}/

jobs:
  lint:
    runs-on: ubuntu-20.04
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REPO }}
      - uses: actions/checkout@v2
      - name: Lint Python
        run: |
          docker-compose run --no-deps --rm backend make -C /corpora-data-portal lint
      - name: Lint frontend
        run: |
          docker-compose run --no-deps --rm frontend make lint
      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,commit,author,eventName,workflow,job,mention
          mention: 'here'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: failure() && github.ref == 'refs/heads/main'

  smoke-test:
    runs-on: ubuntu-20.04
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REPO }}
      - uses: actions/checkout@v2
      - name: Run tests in docker-compose
        run: |
          echo "DOCKER_REPO=${DOCKER_REPO}" > .env.ecr
          make local-sync
          sleep 30  # Give frontend some time to finish building
          make local-smoke-test
      - name: Push images
        if: github.ref == 'refs/heads/main'
        run: |
          # Two requirements files is a temp workaround for python package conflicts
          pip install -r .happy/requirements.txt
          scripts/happy --profile="" push --extra-tag sha-${GITHUB_SHA:0:8} --extra-tag build-${GITHUB_RUN_NUMBER} frontend backend
      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,commit,author,eventName,workflow,job,mention
          mention: 'here'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: failure() && github.ref == 'refs/heads/main'

  build-extra-images:
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REPO }}
      - uses: actions/checkout@v2
      - name: Docker build, push, and tag
        shell: bash
        run: |
          pip install -r .happy/requirements.txt
          scripts/happy --profile="" push --extra-tag sha-${GITHUB_SHA:0:8} --extra-tag build-${GITHUB_RUN_NUMBER} upload_failures processing
      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,commit,author,eventName,workflow,job,mention
          mention: 'here'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: failure() && github.ref == 'refs/heads/main'

  push-prod-images:
    needs:
      - push-image
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_PROD_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REPO }}
      - name: Login to Prod ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REPO_PROD }}
      - name: push lambda upload image
        shell: bash
        run: |
          docker pull ${{ secrets.ECR_REPO }}/corpora-upload-failures:sha-${GITHUB_SHA:0:8}
          docker tag ${{ secrets.ECR_REPO }}/corpora-upload-failures:sha-${GITHUB_SHA:0:8} ${{ secrets.ECR_REPO_PROD }}/corpora-upload-failures:sha-${GITHUB_SHA:0:8}
          docker push ${{ secrets.ECR_REPO_PROD }}/corpora-upload-failures:sha-${GITHUB_SHA:0:8}

  unit-test:
    runs-on: ubuntu-20.04
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REPO }}
      - uses: actions/checkout@v2
      - name: Run tests in docker-compose
        run: |
          echo "DOCKER_REPO=${DOCKER_REPO}" > .env.ecr
          make local-sync
          make local-unit-test
      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,commit,author,eventName,workflow,job,mention
          mention: 'here'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: failure() && github.ref == 'refs/heads/main'

  push-image:
    needs:
      - unit-test
      - smoke-test
      - lint
      - build-extra-images
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REPO }}
      - uses: actions/checkout@v2
      - name: Docker build, push, and tag
        shell: bash
        run: |
          pip install -r .happy/requirements.txt
          scripts/happy --profile="" addtags --source-tag sha-${GITHUB_SHA:0:8} --dest-tag branch-$(echo ${GITHUB_REF#refs/heads/} | sed 's/[\+\/]/-/g')
      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,commit,author,eventName,workflow,job,mention
          mention: 'here'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: failure() && github.ref == 'refs/heads/main'

  create_deployment:
    if: github.ref == 'refs/heads/main'
    needs:
      - push-image
    runs-on: ubuntu-20.04
    steps:
      - name: Generate payload
        run: |
          echo "payload={\"tag\":\"sha-${GITHUB_SHA:0:8}\"}" >> $GITHUB_ENV
      - uses: avakar/create-deployment@v1
        with:
          auto_merge: false
          environment: dev
          payload: ${{ env.payload }}
          required_contexts: ""  # Temporary hack to avoid checking Github Status for the commit
          # TODO: Avoid circular dependency on the deploy step; this step hasn't finished yet so
          # it's not considered ready for deploy normally by required_contexts, but we need to
          # deploy for this to be considered ready.
          # Unfortunately there is no blocklist for required_contexts, only an allowlist, so
          # we'd have to enumerate every other Github PR status here, which can be constantly changing.
          # For now, we just ignore required_contexts to deploy on every success.
          # See https://github.community/t/can-i-avoid-creating-a-check-run-from-a-job-needed-for-deployments-api/16426
        env:
          GITHUB_TOKEN: ${{ secrets.CZIBUILDBOT_GITHUB_TOKEN }}
