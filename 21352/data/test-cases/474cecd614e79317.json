{"uid":"474cecd614e79317","name":"test_type_inference[parameters28]","fullName":"tests.unit.processing.test_type_conversion_utils#test_type_inference","historyId":"13ea306244911874a4c6ca1b5c44ebed","time":{"start":1720647469523,"stop":1720647469524,"duration":1},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"patch_all","time":{"start":1720647416065,"stop":1720647416065,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"caplog","time":{"start":1720647469522,"stop":1720647469522,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"caplog::0","time":{"start":1720647469524,"stop":1720647469524,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.processing"},{"name":"suite","value":"test_type_conversion_utils"},{"name":"host","value":"e49794e7c0c2"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.processing.test_type_conversion_utils"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"parameters","value":"{'data': Int64Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n            ...\n            990, 991, 992, 993, 994, 995, 996, 997, 998, 999],\n           dtype='int64', length=1000), 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"ca43449d5c3d0708","status":"passed","time":{"start":1720647469484,"stop":1720647469485,"duration":1}},{"uid":"cad0dd34e2050bfc","status":"passed","time":{"start":1720647469446,"stop":1720647469446,"duration":0}}],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":8,"unknown":0,"total":8},"items":[{"uid":"ae8d93d5772f78eb","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21351//#testresult/ae8d93d5772f78eb","status":"passed","time":{"start":1720647304565,"stop":1720647304566,"duration":1}},{"uid":"38c2930e759d4987","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21350//#testresult/38c2930e759d4987","status":"passed","time":{"start":1720646951805,"stop":1720646951806,"duration":1}},{"uid":"7a3267e382f5aea7","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21348//#testresult/7a3267e382f5aea7","status":"passed","time":{"start":1720646550184,"stop":1720646550184,"duration":0}},{"uid":"88b61931749e4c5f","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21341//#testresult/88b61931749e4c5f","status":"passed","time":{"start":1720640018300,"stop":1720640018300,"duration":0}},{"uid":"837c22530507f571","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21340//#testresult/837c22530507f571","status":"passed","time":{"start":1720638027659,"stop":1720638027660,"duration":1}},{"uid":"bde5c7e37adc3495","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21339//#testresult/bde5c7e37adc3495","status":"passed","time":{"start":1720637367715,"stop":1720637367716,"duration":1}},{"uid":"5dc45910a92496e3","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21338//#testresult/5dc45910a92496e3","status":"passed","time":{"start":1720637236440,"stop":1720637236441,"duration":1}}]},"tags":[]},"source":"474cecd614e79317.json","parameterValues":["{'data': Int64Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n            ...\n            990, 991, 992, 993, 994, 995, 996, 997, 998, 999],\n           dtype='int64', length=1000), 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"]}