{"uid":"f79674b8313cd937","name":"test_type_inference[parameters42]","fullName":"tests.unit.processing.test_type_conversion_utils#test_type_inference","historyId":"23d33433afdae1968213e85c66998b1d","time":{"start":1736276917011,"stop":1736276917011,"duration":0},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"patch_all","time":{"start":1736276876751,"stop":1736276876751,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"caplog","time":{"start":1736276917010,"stop":1736276917010,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"passed","steps":[],"attachments":[{"uid":"17f5434f8fc06046","name":"log","source":"17f5434f8fc06046.txt","type":"text/plain","size":341},{"uid":"8ea684dd3f8efd6a","name":"stdout","source":"8ea684dd3f8efd6a.txt","type":"text/plain","size":831}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"caplog::0","time":{"start":1736276917012,"stop":1736276917012,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.processing"},{"name":"suite","value":"test_type_conversion_utils"},{"name":"host","value":"d0019bcd3a98"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.processing.test_type_conversion_utils"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"parameters","value":"{'data': Index([-129.0, -128.0, -127.0, -126.0, -125.0, -124.0, -123.0, -122.0, -121.0,\n       -120.0,\n       ...\n        990.0,  991.0,  992.0,  993.0,  994.0,  995.0,  996.0,  997.0,  998.0,\n        999.0],\n      dtype='float64', length=1129), 'expected_encoding_dtype': <class 'numpy.float32'>, 'expected_schema_hint': {'type': 'float32'}, 'logs': {'level': 30, 'output': 'may lose precision'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":7,"unknown":0,"total":7},"items":[{"uid":"6253dbeee8b616a2","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22812//#testresult/6253dbeee8b616a2","status":"passed","time":{"start":1736275574562,"stop":1736275574563,"duration":1}},{"uid":"ad2d576ca1f7cb40","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22811//#testresult/ad2d576ca1f7cb40","status":"passed","time":{"start":1736275280335,"stop":1736275280336,"duration":1}},{"uid":"bd6b3f4625779fcc","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22690//#testresult/bd6b3f4625779fcc","status":"passed","time":{"start":1733520590234,"stop":1733520590235,"duration":1}},{"uid":"6d2998afe5a3fc83","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22689//#testresult/6d2998afe5a3fc83","status":"passed","time":{"start":1733516736596,"stop":1733516736597,"duration":1}},{"uid":"d8161a533faefae0","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22688//#testresult/d8161a533faefae0","status":"passed","time":{"start":1733514090135,"stop":1733514090136,"duration":1}},{"uid":"ab484d86c0acc697","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22687//#testresult/ab484d86c0acc697","status":"passed","time":{"start":1733513219630,"stop":1733513219630,"duration":0}}]},"tags":[]},"source":"f79674b8313cd937.json","parameterValues":["{'data': Index([-129.0, -128.0, -127.0, -126.0, -125.0, -124.0, -123.0, -122.0, -121.0,\n       -120.0,\n       ...\n        990.0,  991.0,  992.0,  993.0,  994.0,  995.0,  996.0,  997.0,  998.0,\n        999.0],\n      dtype='float64', length=1129), 'expected_encoding_dtype': <class 'numpy.float32'>, 'expected_schema_hint': {'type': 'float32'}, 'logs': {'level': 30, 'output': 'may lose precision'}}"]}