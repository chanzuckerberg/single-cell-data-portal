{"uid":"bf9f8c5c4a613ef8","name":"test_type_inference[parameters80]","fullName":"tests.unit.processing.test_type_conversion_utils#test_type_inference","historyId":"b00eeaa763a4169421c6afe3f91db818","time":{"start":1744645891215,"stop":1744645891216,"duration":1},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"patch_all","time":{"start":1744645880550,"stop":1744645880550,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"caplog","time":{"start":1744645891214,"stop":1744645891214,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"passed","steps":[],"attachments":[{"uid":"d652913e9a409904","name":"log","source":"d652913e9a409904.txt","type":"text/plain","size":341},{"uid":"1e7617f6d63f3476","name":"stdout","source":"1e7617f6d63f3476.txt","type":"text/plain","size":831}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"caplog::0","time":{"start":1744645891216,"stop":1744645891216,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.processing"},{"name":"suite","value":"test_type_conversion_utils"},{"name":"host","value":"5a4b6a9ff1ae"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.processing.test_type_conversion_utils"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"parameters","value":"{'data': 0      0\n1    NaN\n2      2\ndtype: category\nCategories (2, int32): [0, 2], 'expected_encoding_dtype': <class 'numpy.float32'>, 'expected_schema_hint': {'type': 'categorical'}, 'logs': {'level': 30, 'output': 'may lose precision'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":8,"unknown":0,"total":8},"items":[{"uid":"1e6bb93ead28e34d","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/24033//#testresult/1e6bb93ead28e34d","status":"passed","time":{"start":1744643892655,"stop":1744643892656,"duration":1}},{"uid":"19fa0a1f47137c0d","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/24023//#testresult/19fa0a1f47137c0d","status":"passed","time":{"start":1744637601871,"stop":1744637601872,"duration":1}},{"uid":"3d364093a8ef227c","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/24017//#testresult/3d364093a8ef227c","status":"passed","time":{"start":1744407043790,"stop":1744407043791,"duration":1}},{"uid":"4676915531380414","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/24016//#testresult/4676915531380414","status":"passed","time":{"start":1744406937355,"stop":1744406937356,"duration":1}},{"uid":"b0868182f3cdccfb","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/24015//#testresult/b0868182f3cdccfb","status":"passed","time":{"start":1744404330290,"stop":1744404330291,"duration":1}},{"uid":"2da92d479a1fd061","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/24012//#testresult/2da92d479a1fd061","status":"passed","time":{"start":1744402200366,"stop":1744402200367,"duration":1}},{"uid":"92660504ceea9569","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/24009//#testresult/92660504ceea9569","status":"passed","time":{"start":1744400192764,"stop":1744400192765,"duration":1}}]},"tags":[]},"source":"bf9f8c5c4a613ef8.json","parameterValues":["{'data': 0      0\n1    NaN\n2      2\ndtype: category\nCategories (2, int32): [0, 2], 'expected_encoding_dtype': <class 'numpy.float32'>, 'expected_schema_hint': {'type': 'categorical'}, 'logs': {'level': 30, 'output': 'may lose precision'}}"]}