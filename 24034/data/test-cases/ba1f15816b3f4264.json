{"uid":"ba1f15816b3f4264","name":"test_type_inference[parameters82]","fullName":"tests.unit.processing.test_type_conversion_utils#test_type_inference","historyId":"eee034a321c3b0a84cfd6822f1545eb5","time":{"start":1744645891225,"stop":1744645891226,"duration":1},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"patch_all","time":{"start":1744645880550,"stop":1744645880550,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"caplog","time":{"start":1744645891224,"stop":1744645891224,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"passed","steps":[],"attachments":[{"uid":"fa6747a66ef4f5df","name":"log","source":"fa6747a66ef4f5df.txt","type":"text/plain","size":341},{"uid":"1682119bb446aeeb","name":"stdout","source":"1682119bb446aeeb.txt","type":"text/plain","size":831}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"caplog::0","time":{"start":1744645891226,"stop":1744645891226,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.processing"},{"name":"suite","value":"test_type_conversion_utils"},{"name":"host","value":"5a4b6a9ff1ae"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.processing.test_type_conversion_utils"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"parameters","value":"{'data': 0      0\n1    NaN\n2      2\ndtype: category\nCategories (2, uint32): [0, 2], 'expected_encoding_dtype': <class 'numpy.float32'>, 'expected_schema_hint': {'type': 'categorical'}, 'logs': {'level': 30, 'output': 'may lose precision'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":8,"unknown":0,"total":8},"items":[{"uid":"bfe2dd32df6be8fb","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/24033//#testresult/bfe2dd32df6be8fb","status":"passed","time":{"start":1744643892666,"stop":1744643892667,"duration":1}},{"uid":"1904f150b02fd363","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/24023//#testresult/1904f150b02fd363","status":"passed","time":{"start":1744637601881,"stop":1744637601882,"duration":1}},{"uid":"325c0d6b72ceb221","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/24017//#testresult/325c0d6b72ceb221","status":"passed","time":{"start":1744407043800,"stop":1744407043801,"duration":1}},{"uid":"d77069a3a4063dae","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/24016//#testresult/d77069a3a4063dae","status":"passed","time":{"start":1744406937365,"stop":1744406937366,"duration":1}},{"uid":"56c52f0ad0661153","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/24015//#testresult/56c52f0ad0661153","status":"passed","time":{"start":1744404330300,"stop":1744404330301,"duration":1}},{"uid":"4eb95e03331eee96","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/24012//#testresult/4eb95e03331eee96","status":"passed","time":{"start":1744402200376,"stop":1744402200377,"duration":1}},{"uid":"d5e8b2f29b9e7580","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/24009//#testresult/d5e8b2f29b9e7580","status":"passed","time":{"start":1744400192775,"stop":1744400192776,"duration":1}}]},"tags":[]},"source":"ba1f15816b3f4264.json","parameterValues":["{'data': 0      0\n1    NaN\n2      2\ndtype: category\nCategories (2, uint32): [0, 2], 'expected_encoding_dtype': <class 'numpy.float32'>, 'expected_schema_hint': {'type': 'categorical'}, 'logs': {'level': 30, 'output': 'may lose precision'}}"]}