{"uid":"308ba0f1196fad9","name":"test_type_inference[parameters46]","fullName":"tests.unit.processing.test_type_conversion_utils#test_type_inference","historyId":"3fcde8d3c40af199fd3ce750fc514354","time":{"start":1720667369077,"stop":1720667369078,"duration":1},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"patch_all","time":{"start":1720667311933,"stop":1720667311933,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"caplog","time":{"start":1720667369076,"stop":1720667369076,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"passed","steps":[],"attachments":[{"uid":"1c3a22d3a38d0cfa","name":"log","source":"1c3a22d3a38d0cfa.txt","type":"text/plain","size":341},{"uid":"d0eac9a40bba3a97","name":"stdout","source":"d0eac9a40bba3a97.txt","type":"text/plain","size":831}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"caplog::0","time":{"start":1720667369078,"stop":1720667369078,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.processing"},{"name":"suite","value":"test_type_conversion_utils"},{"name":"host","value":"394d4f0d4642"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.processing.test_type_conversion_utils"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"parameters","value":"{'data': array([-128., -127., -126., ...,  997.,  998.,  999.]), 'expected_encoding_dtype': <class 'numpy.float32'>, 'expected_schema_hint': {'type': 'float32'}, 'logs': {'level': 30, 'output': 'may lose precision'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":8,"unknown":0,"total":8},"items":[{"uid":"a183ae8f0ae2eec7","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21380//#testresult/a183ae8f0ae2eec7","status":"passed","time":{"start":1720663187724,"stop":1720663187725,"duration":1}},{"uid":"8c04f68317c3e525","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21379//#testresult/8c04f68317c3e525","status":"passed","time":{"start":1720663113620,"stop":1720663113621,"duration":1}},{"uid":"69fb5765139196fd","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21377//#testresult/69fb5765139196fd","status":"passed","time":{"start":1720662780900,"stop":1720662780901,"duration":1}},{"uid":"e937ee25eee91852","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21376//#testresult/e937ee25eee91852","status":"passed","time":{"start":1720657324220,"stop":1720657324221,"duration":1}},{"uid":"8bc4df91eee872d8","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21375//#testresult/8bc4df91eee872d8","status":"passed","time":{"start":1720656982015,"stop":1720656982015,"duration":0}},{"uid":"2efaaf195423db4c","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21373//#testresult/2efaaf195423db4c","status":"passed","time":{"start":1720656033881,"stop":1720656033882,"duration":1}},{"uid":"ea310f78b3392051","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21372//#testresult/ea310f78b3392051","status":"passed","time":{"start":1720655800925,"stop":1720655800926,"duration":1}}]},"tags":[]},"source":"308ba0f1196fad9.json","parameterValues":["{'data': array([-128., -127., -126., ...,  997.,  998.,  999.]), 'expected_encoding_dtype': <class 'numpy.float32'>, 'expected_schema_hint': {'type': 'float32'}, 'logs': {'level': 30, 'output': 'may lose precision'}}"]}