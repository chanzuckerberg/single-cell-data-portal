{"uid":"c429e333390135c6","name":"test_type_inference[parameters25]","fullName":"tests.unit.processing.test_type_conversion_utils#test_type_inference","historyId":"d0e92022b3a4135cba96be54dccb62c0","time":{"start":1736808847611,"stop":1736808847611,"duration":0},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"patch_all","time":{"start":1736808813282,"stop":1736808813282,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"caplog","time":{"start":1736808847610,"stop":1736808847610,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"caplog::0","time":{"start":1736808847612,"stop":1736808847612,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.processing"},{"name":"suite","value":"test_type_conversion_utils"},{"name":"host","value":"33dd0fa37eb7"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.processing.test_type_conversion_utils"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"parameters","value":"{'data': <Compressed Sparse Row sparse matrix of dtype 'uint32'\n\twith 0 stored elements and shape (10, 100)>, 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":10,"unknown":0,"total":10},"items":[{"uid":"86ecbc2564a86a4c","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22863//#testresult/86ecbc2564a86a4c","status":"passed","time":{"start":1736805443944,"stop":1736805443945,"duration":1}},{"uid":"6d09edb3e2e94e06","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22856//#testresult/6d09edb3e2e94e06","status":"passed","time":{"start":1736804265590,"stop":1736804265590,"duration":0}},{"uid":"bd45be3d55069d00","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22821//#testresult/bd45be3d55069d00","status":"passed","time":{"start":1736276916935,"stop":1736276916935,"duration":0}},{"uid":"cf7ae71107343799","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22812//#testresult/cf7ae71107343799","status":"passed","time":{"start":1736275574490,"stop":1736275574491,"duration":1}},{"uid":"27619cac49fadae5","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22811//#testresult/27619cac49fadae5","status":"passed","time":{"start":1736275280261,"stop":1736275280262,"duration":1}},{"uid":"d15f39972258385b","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22690//#testresult/d15f39972258385b","status":"passed","time":{"start":1733520590154,"stop":1733520590154,"duration":0}},{"uid":"cf69d03b1cdf2d50","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22689//#testresult/cf69d03b1cdf2d50","status":"passed","time":{"start":1733516736522,"stop":1733516736522,"duration":0}},{"uid":"9dce1e38157fd1d4","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22688//#testresult/9dce1e38157fd1d4","status":"passed","time":{"start":1733514090061,"stop":1733514090062,"duration":1}},{"uid":"69c3dfcb13fbce5d","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22687//#testresult/69c3dfcb13fbce5d","status":"passed","time":{"start":1733513219556,"stop":1733513219556,"duration":0}}]},"tags":[]},"source":"c429e333390135c6.json","parameterValues":["{'data': <Compressed Sparse Row sparse matrix of dtype 'uint32'\n\twith 0 stored elements and shape (10, 100)>, 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"]}