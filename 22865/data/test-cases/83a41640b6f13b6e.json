{"uid":"83a41640b6f13b6e","name":"test_type_inference[parameters32]","fullName":"tests.unit.processing.test_type_conversion_utils#test_type_inference","historyId":"8ec1ee4de73667624d73dbdaee36af12","time":{"start":1736808847646,"stop":1736808847646,"duration":0},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"patch_all","time":{"start":1736808813282,"stop":1736808813282,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"caplog","time":{"start":1736808847645,"stop":1736808847645,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"caplog::0","time":{"start":1736808847646,"stop":1736808847646,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.processing"},{"name":"suite","value":"test_type_conversion_utils"},{"name":"host","value":"33dd0fa37eb7"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.processing.test_type_conversion_utils"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"parameters","value":"{'data': Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       990, 991, 992, 993, 994, 995, 996, 997, 998, 999],\n      dtype='uint64', length=1000), 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":10,"unknown":0,"total":10},"items":[{"uid":"aaf6d7c637c2099d","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22863//#testresult/aaf6d7c637c2099d","status":"passed","time":{"start":1736805443979,"stop":1736805443979,"duration":0}},{"uid":"d6dd9a8981143255","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22856//#testresult/d6dd9a8981143255","status":"passed","time":{"start":1736804265626,"stop":1736804265626,"duration":0}},{"uid":"6ae8d66b17f1be2a","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22821//#testresult/6ae8d66b17f1be2a","status":"passed","time":{"start":1736276916970,"stop":1736276916971,"duration":1}},{"uid":"fe1def51779ca312","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22812//#testresult/fe1def51779ca312","status":"passed","time":{"start":1736275574524,"stop":1736275574524,"duration":0}},{"uid":"5739fb1fc72f4861","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22811//#testresult/5739fb1fc72f4861","status":"passed","time":{"start":1736275280296,"stop":1736275280297,"duration":1}},{"uid":"870e937c6ae9a293","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22690//#testresult/870e937c6ae9a293","status":"passed","time":{"start":1733520590191,"stop":1733520590192,"duration":1}},{"uid":"f047bc00ee7f507e","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22689//#testresult/f047bc00ee7f507e","status":"passed","time":{"start":1733516736557,"stop":1733516736557,"duration":0}},{"uid":"ef8813347d7e54d1","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22688//#testresult/ef8813347d7e54d1","status":"passed","time":{"start":1733514090096,"stop":1733514090096,"duration":0}},{"uid":"321687fad8be08d5","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22687//#testresult/321687fad8be08d5","status":"passed","time":{"start":1733513219591,"stop":1733513219592,"duration":1}}]},"tags":[]},"source":"83a41640b6f13b6e.json","parameterValues":["{'data': Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       990, 991, 992, 993, 994, 995, 996, 997, 998, 999],\n      dtype='uint64', length=1000), 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"]}