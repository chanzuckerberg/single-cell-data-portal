{"uid":"2f89a250bab726b1","name":"test_type_inference[parameters9]","fullName":"tests.unit.processing.test_type_conversion_utils#test_type_inference","historyId":"2c235303397ac20c897b76f50022a7b2","time":{"start":1736808847536,"stop":1736808847536,"duration":0},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"patch_all","time":{"start":1736808813282,"stop":1736808813282,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"caplog","time":{"start":1736808847536,"stop":1736808847536,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"caplog::0","time":{"start":1736808847537,"stop":1736808847537,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.processing"},{"name":"suite","value":"test_type_conversion_utils"},{"name":"host","value":"33dd0fa37eb7"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.processing.test_type_conversion_utils"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"parameters","value":"{'data': <Compressed Sparse Row sparse matrix of dtype 'uint8'\n\twith 0 stored elements and shape (10, 100)>, 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":10,"unknown":0,"total":10},"items":[{"uid":"cb27535f9c833caa","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22863//#testresult/cb27535f9c833caa","status":"passed","time":{"start":1736805443869,"stop":1736805443869,"duration":0}},{"uid":"31dce274979570f3","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22856//#testresult/31dce274979570f3","status":"passed","time":{"start":1736804265513,"stop":1736804265513,"duration":0}},{"uid":"7cb564c47b97586a","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22821//#testresult/7cb564c47b97586a","status":"passed","time":{"start":1736276916860,"stop":1736276916860,"duration":0}},{"uid":"ac141156e6102488","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22812//#testresult/ac141156e6102488","status":"passed","time":{"start":1736275574416,"stop":1736275574416,"duration":0}},{"uid":"e2b0ff164770e71c","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22811//#testresult/e2b0ff164770e71c","status":"passed","time":{"start":1736275280185,"stop":1736275280185,"duration":0}},{"uid":"3bf4060e5800595c","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22690//#testresult/3bf4060e5800595c","status":"passed","time":{"start":1733520590075,"stop":1733520590075,"duration":0}},{"uid":"e3a9509bee53fee1","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22689//#testresult/e3a9509bee53fee1","status":"passed","time":{"start":1733516736446,"stop":1733516736447,"duration":1}},{"uid":"b722d8a2bab65deb","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22688//#testresult/b722d8a2bab65deb","status":"passed","time":{"start":1733514089986,"stop":1733514089987,"duration":1}},{"uid":"1d7ba211b19dd8cf","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/22687//#testresult/1d7ba211b19dd8cf","status":"passed","time":{"start":1733513219481,"stop":1733513219481,"duration":0}}]},"tags":[]},"source":"2f89a250bab726b1.json","parameterValues":["{'data': <Compressed Sparse Row sparse matrix of dtype 'uint8'\n\twith 0 stored elements and shape (10, 100)>, 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"]}