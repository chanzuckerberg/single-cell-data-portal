{"uid":"f74684f7f5804b4d","name":"test__rollup[no_compare_dim_all_tissues_have_all_cell_types-input_cell_counts_df0-expected_cell_counts_df0-input_gene_expr_df0-expected_gene_expr_df0]","fullName":"tests.unit.backend.wmg.api.common.test_rollup#test__rollup","historyId":"f8f8ae804e63395ddf252e5ce0694c9b","time":{"start":1710341293326,"stop":1710341293357,"duration":31},"description":"\n    Test that the `rollup` function correctly accumulates (or rolls up) gene-expression\n    values FOR EACH expressed gene and cell count values up the cell type ANCESTOR paths\n    grouped by (tissue_ontology_term_id, cell_type_ontology_term_id, <compare_dimension>).\n\n    The input:\n\n    1. A cell type ontology subgraph consisting of 4 cell types.\n\n    CL:0000127\n    ├── CL:0000644\n    ├── CL:0002605\n    └── CL:0002627\n\n    2. A gene expression dataframe consisting of expression numeric values for each\n    (gene_ontology_term_id, tissue_ontology_term_id, cell_type_ontology_term_id, <compare_dimension>) tuple.\n    3. The gene expression dataframe also holds total cell counts per tissue_ontology_term_id.\n    This value is held in a column called `n_cells_tissue`.\n    6. A cell counts dataframe that consists of cell counts for each\n    (tissue_ontology_term_id, cell_type_ontology_term_id, <compare_dimension>) tuple.\n    7. We set the `n_cells_tissue` column values to 1000 for all rows\n    in the gene expression dataframe.\n    8. We set all other numeric column values to `1` in the gene expression dataframe.\n\n    The expected output:\n\n    1. A rolled up gene expression dataframe.\n    2. A rolled up cell counts dataframe.\n    3. Assert that `n_cells_tissue` column value in the rolled up gene expression dataframe\n    does not change for all rows because it should not be rolled up the cell type ontology\n    ancestor paths.\n    4. Assert that other numeric column values (i.e the columns that are not `n_cells_tissue`)\n    in the rolled up gene expression dataframe hold the correct rolled up values.\n    5. Assert that the cell counts in the rolled up cell counts dataframe hold the correct\n    rolled up values.\n    ","descriptionHtml":"<pre><code>Test that the `rollup` function correctly accumulates (or rolls up) gene-expression\nvalues FOR EACH expressed gene and cell count values up the cell type ANCESTOR paths\ngrouped by (tissue_ontology_term_id, cell_type_ontology_term_id, &lt;compare_dimension&gt;).\n\nThe input:\n\n1. A cell type ontology subgraph consisting of 4 cell types.\n\nCL:0000127\n├── CL:0000644\n├── CL:0002605\n└── CL:0002627\n\n2. A gene expression dataframe consisting of expression numeric values for each\n(gene_ontology_term_id, tissue_ontology_term_id, cell_type_ontology_term_id, &lt;compare_dimension&gt;) tuple.\n3. The gene expression dataframe also holds total cell counts per tissue_ontology_term_id.\nThis value is held in a column called `n_cells_tissue`.\n6. A cell counts dataframe that consists of cell counts for each\n(tissue_ontology_term_id, cell_type_ontology_term_id, &lt;compare_dimension&gt;) tuple.\n7. We set the `n_cells_tissue` column values to 1000 for all rows\nin the gene expression dataframe.\n8. We set all other numeric column values to `1` in the gene expression dataframe.\n\nThe expected output:\n\n1. A rolled up gene expression dataframe.\n2. A rolled up cell counts dataframe.\n3. Assert that `n_cells_tissue` column value in the rolled up gene expression dataframe\ndoes not change for all rows because it should not be rolled up the cell type ontology\nancestor paths.\n4. Assert that other numeric column values (i.e the columns that are not `n_cells_tissue`)\nin the rolled up gene expression dataframe hold the correct rolled up values.\n5. Assert that the cell counts in the rolled up cell counts dataframe hold the correct\nrolled up values.\n</code></pre>\n","status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"patch_all","time":{"start":1710341290411,"stop":1710341290412,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n    Test that the `rollup` function correctly accumulates (or rolls up) gene-expression\n    values FOR EACH expressed gene and cell count values up the cell type ANCESTOR paths\n    grouped by (tissue_ontology_term_id, cell_type_ontology_term_id, <compare_dimension>).\n\n    The input:\n\n    1. A cell type ontology subgraph consisting of 4 cell types.\n\n    CL:0000127\n    ├── CL:0000644\n    ├── CL:0002605\n    └── CL:0002627\n\n    2. A gene expression dataframe consisting of expression numeric values for each\n    (gene_ontology_term_id, tissue_ontology_term_id, cell_type_ontology_term_id, <compare_dimension>) tuple.\n    3. The gene expression dataframe also holds total cell counts per tissue_ontology_term_id.\n    This value is held in a column called `n_cells_tissue`.\n    6. A cell counts dataframe that consists of cell counts for each\n    (tissue_ontology_term_id, cell_type_ontology_term_id, <compare_dimension>) tuple.\n    7. We set the `n_cells_tissue` column values to 1000 for all rows\n    in the gene expression dataframe.\n    8. We set all other numeric column values to `1` in the gene expression dataframe.\n\n    The expected output:\n\n    1. A rolled up gene expression dataframe.\n    2. A rolled up cell counts dataframe.\n    3. Assert that `n_cells_tissue` column value in the rolled up gene expression dataframe\n    does not change for all rows because it should not be rolled up the cell type ontology\n    ancestor paths.\n    4. Assert that other numeric column values (i.e the columns that are not `n_cells_tissue`)\n    in the rolled up gene expression dataframe hold the correct rolled up values.\n    5. Assert that the cell counts in the rolled up cell counts dataframe hold the correct\n    rolled up values.\n    ","status":"passed","steps":[],"attachments":[{"uid":"909a75723a077913","name":"log","source":"909a75723a077913.txt","type":"text/plain","size":230},{"uid":"756bf3de7afc2d12","name":"stderr","source":"756bf3de7afc2d12.txt","type":"text/plain","size":704}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests.unit.backend.wmg.api.common"},{"name":"suite","value":"test_rollup"},{"name":"host","value":"328df18e334f"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.backend.wmg.api.common.test_rollup"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_cell_counts_df","value":"                                                    n_cells_cell_type\ntissue_ontology_term_id cell_type_ontology_term_id                   \nUBERON:0000955          CL:0000127                                540\n                        CL:0000644                                 70\n                        CL:0002605                                 80\n                        CL:0002627                                 90\nUBERON:0002113          CL:0000127                                540\n                        CL:0000644                                 70\n                        CL:0002605                                 80\n                        CL:0002627                                 90"},{"name":"expected_gene_expr_df","value":"  gene_ontology_term_id  ... n_cells_tissue\n0       ENSG00000085265  ...           1000\n1       ENSG00000169429  ...           1000\n2       ENSG00000085265  ...           1000\n3       ENSG00000085265  ...           1000\n4       ENSG00000169429  ...           1000\n5       ENSG00000085265  ...           1000\n6       ENSG00000169429  ...           1000\n7       ENSG00000085265  ...           1000\n8       ENSG00000085265  ...           1000\n9       ENSG00000169429  ...           1000\n\n[10 rows x 7 columns]"},{"name":"input_cell_counts_df","value":"                                                    n_cells_cell_type\ntissue_ontology_term_id cell_type_ontology_term_id                   \nUBERON:0000955          CL:0000127                                300\n                        CL:0000644                                 70\n                        CL:0002605                                 80\n                        CL:0002627                                 90\nUBERON:0002113          CL:0000127                                300\n                        CL:0000644                                 70\n                        CL:0002605                                 80\n                        CL:0002627                                 90"},{"name":"input_gene_expr_df","value":"  gene_ontology_term_id  ... n_cells_tissue\n0       ENSG00000085265  ...           1000\n1       ENSG00000085265  ...           1000\n2       ENSG00000169429  ...           1000\n3       ENSG00000085265  ...           1000\n4       ENSG00000085265  ...           1000\n5       ENSG00000169429  ...           1000\n\n[6 rows x 7 columns]"},{"name":"name","value":"'no_compare_dim_all_tissues_have_all_cell_types'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":708,"unknown":0,"total":708},"items":[{"uid":"b00650caeb50a615","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/18971//#testresult/b00650caeb50a615","status":"passed","time":{"start":1710294699490,"stop":1710294699516,"duration":26}},{"uid":"8cbdfb0bf3cf01e2","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/18970//#testresult/8cbdfb0bf3cf01e2","status":"passed","time":{"start":1710294345241,"stop":1710294345266,"duration":25}},{"uid":"da72f922dbb7a1c3","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/18964//#testresult/da72f922dbb7a1c3","status":"passed","time":{"start":1710276117238,"stop":1710276117263,"duration":25}},{"uid":"44065adb8f37b9d4","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/18962//#testresult/44065adb8f37b9d4","status":"passed","time":{"start":1710272407553,"stop":1710272407578,"duration":25}},{"uid":"ebb2936cc5c78dd7","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/18961//#testresult/ebb2936cc5c78dd7","status":"passed","time":{"start":1710260350961,"stop":1710260350999,"duration":38}},{"uid":"c20eec46c6291a36","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/18960//#testresult/c20eec46c6291a36","status":"passed","time":{"start":1710260225230,"stop":1710260225255,"duration":25}},{"uid":"cee3028d06ed9fc3","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/18955//#testresult/cee3028d06ed9fc3","status":"passed","time":{"start":1710192951868,"stop":1710192951896,"duration":28}},{"uid":"406c966385b8405","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/18948//#testresult/406c966385b8405","status":"passed","time":{"start":1710185095128,"stop":1710185095153,"duration":25}},{"uid":"4e55f59f7148ab12","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/18946//#testresult/4e55f59f7148ab12","status":"passed","time":{"start":1710183247548,"stop":1710183247573,"duration":25}},{"uid":"9499726a0d0c5b2e","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/18922//#testresult/9499726a0d0c5b2e","status":"passed","time":{"start":1709942913168,"stop":1709942913193,"duration":25}},{"uid":"4a5f6112d9cadd41","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/18918//#testresult/4a5f6112d9cadd41","status":"passed","time":{"start":1709929444399,"stop":1709929444426,"duration":27}},{"uid":"b56c86e29d486b9","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/18917//#testresult/b56c86e29d486b9","status":"passed","time":{"start":1709925557853,"stop":1709925557879,"duration":26}},{"uid":"1e9e5f5c5ac947e4","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/18915//#testresult/1e9e5f5c5ac947e4","status":"passed","time":{"start":1709923034349,"stop":1709923034373,"duration":24}},{"uid":"f1313693499cdd0c","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/18914//#testresult/f1313693499cdd0c","status":"passed","time":{"start":1709922651891,"stop":1709922651915,"duration":24}},{"uid":"86ea5467caf59861","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/18912//#testresult/86ea5467caf59861","status":"passed","time":{"start":1709915650181,"stop":1709915650206,"duration":25}},{"uid":"a7c4894737340564","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/18909//#testresult/a7c4894737340564","status":"passed","time":{"start":1709860477160,"stop":1709860477185,"duration":25}},{"uid":"f4dc4cff746d4dc","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/18907//#testresult/f4dc4cff746d4dc","status":"passed","time":{"start":1709858607068,"stop":1709858607094,"duration":26}},{"uid":"877cda1fa1241cf","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/18905//#testresult/877cda1fa1241cf","status":"passed","time":{"start":1709852614529,"stop":1709852614555,"duration":26}},{"uid":"836a2c0dabec6d7c","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/18903//#testresult/836a2c0dabec6d7c","status":"passed","time":{"start":1709848224300,"stop":1709848224325,"duration":25}},{"uid":"d779b1b36e4c90d1","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/18902//#testresult/d779b1b36e4c90d1","status":"passed","time":{"start":1709847720313,"stop":1709847720339,"duration":26}}]},"tags":[]},"source":"f74684f7f5804b4d.json","parameterValues":["                                                    n_cells_cell_type\ntissue_ontology_term_id cell_type_ontology_term_id                   \nUBERON:0000955          CL:0000127                                540\n                        CL:0000644                                 70\n                        CL:0002605                                 80\n                        CL:0002627                                 90\nUBERON:0002113          CL:0000127                                540\n                        CL:0000644                                 70\n                        CL:0002605                                 80\n                        CL:0002627                                 90","  gene_ontology_term_id  ... n_cells_tissue\n0       ENSG00000085265  ...           1000\n1       ENSG00000169429  ...           1000\n2       ENSG00000085265  ...           1000\n3       ENSG00000085265  ...           1000\n4       ENSG00000169429  ...           1000\n5       ENSG00000085265  ...           1000\n6       ENSG00000169429  ...           1000\n7       ENSG00000085265  ...           1000\n8       ENSG00000085265  ...           1000\n9       ENSG00000169429  ...           1000\n\n[10 rows x 7 columns]","                                                    n_cells_cell_type\ntissue_ontology_term_id cell_type_ontology_term_id                   \nUBERON:0000955          CL:0000127                                300\n                        CL:0000644                                 70\n                        CL:0002605                                 80\n                        CL:0002627                                 90\nUBERON:0002113          CL:0000127                                300\n                        CL:0000644                                 70\n                        CL:0002605                                 80\n                        CL:0002627                                 90","  gene_ontology_term_id  ... n_cells_tissue\n0       ENSG00000085265  ...           1000\n1       ENSG00000085265  ...           1000\n2       ENSG00000169429  ...           1000\n3       ENSG00000085265  ...           1000\n4       ENSG00000085265  ...           1000\n5       ENSG00000169429  ...           1000\n\n[6 rows x 7 columns]","'no_compare_dim_all_tissues_have_all_cell_types'"]}