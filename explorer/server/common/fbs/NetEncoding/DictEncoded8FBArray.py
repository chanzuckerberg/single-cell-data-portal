# automatically generated by the FlatBuffers compiler, do not modify

# namespace: NetEncoding

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class DictEncoded8FBArray(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DictEncoded8FBArray()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDictEncoded8FBArray(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # DictEncoded8FBArray
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DictEncoded8FBArray
    def Codes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1)
            )
        return 0

    # DictEncoded8FBArray
    def CodesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # DictEncoded8FBArray
    def CodesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DictEncoded8FBArray
    def CodesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # DictEncoded8FBArray
    def Dict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1)
            )
        return 0

    # DictEncoded8FBArray
    def DictAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # DictEncoded8FBArray
    def DictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DictEncoded8FBArray
    def DictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0


def Start(builder):
    builder.StartObject(2)


def DictEncoded8FBArrayStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)


def AddCodes(builder, codes):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(codes), 0)


def DictEncoded8FBArrayAddCodes(builder, codes):
    """This method is deprecated. Please switch to AddCodes."""
    return AddCodes(builder, codes)


def StartCodesVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)


def DictEncoded8FBArrayStartCodesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartCodesVector(builder, numElems)


def AddDict(builder, dict):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dict), 0)


def DictEncoded8FBArrayAddDict(builder, dict):
    """This method is deprecated. Please switch to AddDict."""
    return AddDict(builder, dict)


def StartDictVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)


def DictEncoded8FBArrayStartDictVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartDictVector(builder, numElems)


def End(builder):
    return builder.EndObject()


def DictEncoded8FBArrayEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
