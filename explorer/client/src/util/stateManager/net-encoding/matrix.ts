// automatically generated by the FlatBuffers compiler, do not modify
// @ts-nocheck
import { flatbuffers } from "flatbuffers";

import { Column } from "../net-encoding/column";
import {
  TypedFBArray,
  unionToTypedFBArray,
  unionListToTypedFBArray,
} from "../net-encoding/typed-f-b-array";

export class Matrix {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): Matrix {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsMatrix(bb: flatbuffers.ByteBuffer, obj?: Matrix): Matrix {
    return (obj || new Matrix()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  static getSizePrefixedRootAsMatrix(
    bb: flatbuffers.ByteBuffer,
    obj?: Matrix,
  ): Matrix {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Matrix()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  nRows(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
  }

  nCols(): number {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
  }

  columns(index: number, obj?: Column): Column | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset
      ? (obj || new Column()).__init(
          this.bb!.__indirect(
            this.bb!.__vector(this.bb_pos + offset) + index * 4,
          ),
          this.bb!,
        )
      : null;
  }

  columnsLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  colIndexType(): TypedFBArray {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset
      ? this.bb!.readUint8(this.bb_pos + offset)
      : TypedFBArray.NONE;
  }

  colIndex<T extends flatbuffers.Table>(obj: any): any | null {
    const offset = this.bb!.__offset(this.bb_pos, 12);
    return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
  }

  rowIndexType(): TypedFBArray {
    const offset = this.bb!.__offset(this.bb_pos, 14);
    return offset
      ? this.bb!.readUint8(this.bb_pos + offset)
      : TypedFBArray.NONE;
  }

  rowIndex<T extends flatbuffers.Table>(obj: any): any | null {
    const offset = this.bb!.__offset(this.bb_pos, 16);
    return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
  }

  static startMatrix(builder: flatbuffers.Builder) {
    builder.startObject(7);
  }

  static addNRows(builder: flatbuffers.Builder, nRows: number) {
    builder.addFieldInt32(0, nRows, 0);
  }

  static addNCols(builder: flatbuffers.Builder, nCols: number) {
    builder.addFieldInt32(1, nCols, 0);
  }

  static addColumns(
    builder: flatbuffers.Builder,
    columnsOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(2, columnsOffset, 0);
  }

  static createColumnsVector(
    builder: flatbuffers.Builder,
    data: flatbuffers.Offset[],
  ): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!);
    }
    return builder.endVector();
  }

  static startColumnsVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static addColIndexType(
    builder: flatbuffers.Builder,
    colIndexType: TypedFBArray,
  ) {
    builder.addFieldInt8(3, colIndexType, TypedFBArray.NONE);
  }

  static addColIndex(
    builder: flatbuffers.Builder,
    colIndexOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(4, colIndexOffset, 0);
  }

  static addRowIndexType(
    builder: flatbuffers.Builder,
    rowIndexType: TypedFBArray,
  ) {
    builder.addFieldInt8(5, rowIndexType, TypedFBArray.NONE);
  }

  static addRowIndex(
    builder: flatbuffers.Builder,
    rowIndexOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(6, rowIndexOffset, 0);
  }

  static endMatrix(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static finishMatrixBuffer(
    builder: flatbuffers.Builder,
    offset: flatbuffers.Offset,
  ) {
    builder.finish(offset);
  }

  static finishSizePrefixedMatrixBuffer(
    builder: flatbuffers.Builder,
    offset: flatbuffers.Offset,
  ) {
    builder.finish(offset, undefined, true);
  }

  static createMatrix(
    builder: flatbuffers.Builder,
    nRows: number,
    nCols: number,
    columnsOffset: flatbuffers.Offset,
    colIndexType: TypedFBArray,
    colIndexOffset: flatbuffers.Offset,
    rowIndexType: TypedFBArray,
    rowIndexOffset: flatbuffers.Offset,
  ): flatbuffers.Offset {
    Matrix.startMatrix(builder);
    Matrix.addNRows(builder, nRows);
    Matrix.addNCols(builder, nCols);
    Matrix.addColumns(builder, columnsOffset);
    Matrix.addColIndexType(builder, colIndexType);
    Matrix.addColIndex(builder, colIndexOffset);
    Matrix.addRowIndexType(builder, rowIndexType);
    Matrix.addRowIndex(builder, rowIndexOffset);
    return Matrix.endMatrix(builder);
  }
}
