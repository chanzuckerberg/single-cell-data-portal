// automatically generated by the FlatBuffers compiler, do not modify
// @ts-nocheck
import { flatbuffers } from "flatbuffers";

export class Int16EncodedXFBArray {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): Int16EncodedXFBArray {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsInt16EncodedXFBArray(
    bb: flatbuffers.ByteBuffer,
    obj?: Int16EncodedXFBArray,
  ): Int16EncodedXFBArray {
    return (obj || new Int16EncodedXFBArray()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  static getSizePrefixedRootAsInt16EncodedXFBArray(
    bb: flatbuffers.ByteBuffer,
    obj?: Int16EncodedXFBArray,
  ): Int16EncodedXFBArray {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Int16EncodedXFBArray()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  codes(index: number): number | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? this.bb!.readInt16(this.bb!.__vector(this.bb_pos + offset) + index * 2)
      : 0;
  }

  codesLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  codesArray(): Int16Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? new Int16Array(
          this.bb!.bytes().buffer,
          this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),
          this.bb!.__vector_len(this.bb_pos + offset),
        )
      : null;
  }

  max(): number {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
  }

  min(): number {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
  }

  nbins(): number {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
  }

  static startInt16EncodedXFBArray(builder: flatbuffers.Builder) {
    builder.startObject(4);
  }

  static addCodes(
    builder: flatbuffers.Builder,
    codesOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(0, codesOffset, 0);
  }

  static createCodesVector(
    builder: flatbuffers.Builder,
    data: number[] | Int16Array,
  ): flatbuffers.Offset;
  /**
   * @deprecated This Uint8Array overload will be removed in the future.
   */
  static createCodesVector(
    builder: flatbuffers.Builder,
    data: number[] | Uint8Array,
  ): flatbuffers.Offset;
  static createCodesVector(
    builder: flatbuffers.Builder,
    data: number[] | Int16Array | Uint8Array,
  ): flatbuffers.Offset {
    builder.startVector(2, data.length, 2);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt16(data[i]!);
    }
    return builder.endVector();
  }

  static startCodesVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(2, numElems, 2);
  }

  static addMax(builder: flatbuffers.Builder, max: number) {
    builder.addFieldFloat32(1, max, 0.0);
  }

  static addMin(builder: flatbuffers.Builder, min: number) {
    builder.addFieldFloat32(2, min, 0.0);
  }

  static addNbins(builder: flatbuffers.Builder, nbins: number) {
    builder.addFieldInt32(3, nbins, 0);
  }

  static endInt16EncodedXFBArray(
    builder: flatbuffers.Builder,
  ): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createInt16EncodedXFBArray(
    builder: flatbuffers.Builder,
    codesOffset: flatbuffers.Offset,
    max: number,
    min: number,
    nbins: number,
  ): flatbuffers.Offset {
    Int16EncodedXFBArray.startInt16EncodedXFBArray(builder);
    Int16EncodedXFBArray.addCodes(builder, codesOffset);
    Int16EncodedXFBArray.addMax(builder, max);
    Int16EncodedXFBArray.addMin(builder, min);
    Int16EncodedXFBArray.addNbins(builder, nbins);
    return Int16EncodedXFBArray.endInt16EncodedXFBArray(builder);
  }
}
