// automatically generated by the FlatBuffers compiler, do not modify
// @ts-nocheck
import { flatbuffers } from "flatbuffers";

import {
  TypedFBArray,
  unionToTypedFBArray,
  unionListToTypedFBArray,
} from "../net-encoding/typed-f-b-array";

export class Column {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): Column {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsColumn(bb: flatbuffers.ByteBuffer, obj?: Column): Column {
    return (obj || new Column()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  static getSizePrefixedRootAsColumn(
    bb: flatbuffers.ByteBuffer,
    obj?: Column,
  ): Column {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Column()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  uType(): TypedFBArray {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? this.bb!.readUint8(this.bb_pos + offset)
      : TypedFBArray.NONE;
  }

  u<T extends flatbuffers.Table>(obj: any): any | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
  }

  static startColumn(builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static addUType(builder: flatbuffers.Builder, uType: TypedFBArray) {
    builder.addFieldInt8(0, uType, TypedFBArray.NONE);
  }

  static addU(builder: flatbuffers.Builder, uOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, uOffset, 0);
  }

  static endColumn(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createColumn(
    builder: flatbuffers.Builder,
    uType: TypedFBArray,
    uOffset: flatbuffers.Offset,
  ): flatbuffers.Offset {
    Column.startColumn(builder);
    Column.addUType(builder, uType);
    Column.addU(builder, uOffset);
    return Column.endColumn(builder);
  }
}
