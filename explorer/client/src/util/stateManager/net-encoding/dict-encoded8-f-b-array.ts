// automatically generated by the FlatBuffers compiler, do not modify
// @ts-nocheck
import { flatbuffers } from "flatbuffers";

export class DictEncoded8FBArray {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): DictEncoded8FBArray {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsDictEncoded8FBArray(
    bb: flatbuffers.ByteBuffer,
    obj?: DictEncoded8FBArray,
  ): DictEncoded8FBArray {
    return (obj || new DictEncoded8FBArray()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  static getSizePrefixedRootAsDictEncoded8FBArray(
    bb: flatbuffers.ByteBuffer,
    obj?: DictEncoded8FBArray,
  ): DictEncoded8FBArray {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new DictEncoded8FBArray()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  codes(index: number): number | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? this.bb!.readInt8(this.bb!.__vector(this.bb_pos + offset) + index)
      : 0;
  }

  codesLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  codesArray(): Int8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? new Int8Array(
          this.bb!.bytes().buffer,
          this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),
          this.bb!.__vector_len(this.bb_pos + offset),
        )
      : null;
  }

  dict(index: number): number | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset
      ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index)
      : 0;
  }

  dictLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  dictArray(): Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset
      ? new Uint8Array(
          this.bb!.bytes().buffer,
          this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),
          this.bb!.__vector_len(this.bb_pos + offset),
        )
      : null;
  }

  static startDictEncoded8FBArray(builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static addCodes(
    builder: flatbuffers.Builder,
    codesOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(0, codesOffset, 0);
  }

  static createCodesVector(
    builder: flatbuffers.Builder,
    data: number[] | Int8Array,
  ): flatbuffers.Offset;
  /**
   * @deprecated This Uint8Array overload will be removed in the future.
   */
  static createCodesVector(
    builder: flatbuffers.Builder,
    data: number[] | Uint8Array,
  ): flatbuffers.Offset;
  static createCodesVector(
    builder: flatbuffers.Builder,
    data: number[] | Int8Array | Uint8Array,
  ): flatbuffers.Offset {
    builder.startVector(1, data.length, 1);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt8(data[i]!);
    }
    return builder.endVector();
  }

  static startCodesVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(1, numElems, 1);
  }

  static addDict(builder: flatbuffers.Builder, dictOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, dictOffset, 0);
  }

  static createDictVector(
    builder: flatbuffers.Builder,
    data: number[] | Uint8Array,
  ): flatbuffers.Offset {
    builder.startVector(1, data.length, 1);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt8(data[i]!);
    }
    return builder.endVector();
  }

  static startDictVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(1, numElems, 1);
  }

  static endDictEncoded8FBArray(
    builder: flatbuffers.Builder,
  ): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createDictEncoded8FBArray(
    builder: flatbuffers.Builder,
    codesOffset: flatbuffers.Offset,
    dictOffset: flatbuffers.Offset,
  ): flatbuffers.Offset {
    DictEncoded8FBArray.startDictEncoded8FBArray(builder);
    DictEncoded8FBArray.addCodes(builder, codesOffset);
    DictEncoded8FBArray.addDict(builder, dictOffset);
    return DictEncoded8FBArray.endDictEncoded8FBArray(builder);
  }
}
