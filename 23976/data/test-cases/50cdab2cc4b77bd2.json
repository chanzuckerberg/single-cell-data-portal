{"uid":"50cdab2cc4b77bd2","name":"test_type_inference[parameters16]","fullName":"tests.unit.processing.test_type_conversion_utils#test_type_inference","historyId":"dae67d4a78ba90c58eb76d1a357184c3","time":{"start":1744383515303,"stop":1744383515304,"duration":1},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"patch_all","time":{"start":1744383505005,"stop":1744383505005,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"caplog","time":{"start":1744383515302,"stop":1744383515303,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"caplog::0","time":{"start":1744383515304,"stop":1744383515304,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.processing"},{"name":"suite","value":"test_type_conversion_utils"},{"name":"host","value":"75723b7251fe"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.processing.test_type_conversion_utils"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"parameters","value":"{'data': Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       990, 991, 992, 993, 994, 995, 996, 997, 998, 999],\n      dtype='uint16', length=1000), 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":10,"unknown":0,"total":10},"items":[{"uid":"ff513b0e7572b18c","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23975//#testresult/ff513b0e7572b18c","status":"passed","time":{"start":1744337376845,"stop":1744337376845,"duration":0}},{"uid":"889404f9ddfb369c","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23966//#testresult/889404f9ddfb369c","status":"passed","time":{"start":1744334800248,"stop":1744334800249,"duration":1}},{"uid":"221dd4c4094b6ca6","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23965//#testresult/221dd4c4094b6ca6","status":"passed","time":{"start":1744328197554,"stop":1744328197555,"duration":1}},{"uid":"9ca7a2a1fae6a422","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23964//#testresult/9ca7a2a1fae6a422","status":"passed","time":{"start":1744326572489,"stop":1744326572490,"duration":1}},{"uid":"8efbcb34e054678d","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23961//#testresult/8efbcb34e054678d","status":"passed","time":{"start":1744324473118,"stop":1744324473118,"duration":0}},{"uid":"edf224c0fd7246c0","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23954//#testresult/edf224c0fd7246c0","status":"passed","time":{"start":1744324189290,"stop":1744324189291,"duration":1}},{"uid":"2485d7eca73b3960","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23951//#testresult/2485d7eca73b3960","status":"passed","time":{"start":1744322847372,"stop":1744322847372,"duration":0}},{"uid":"784c696961d9dfd4","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23950//#testresult/784c696961d9dfd4","status":"passed","time":{"start":1744317734331,"stop":1744317734331,"duration":0}},{"uid":"756161e784cb3899","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23949//#testresult/756161e784cb3899","status":"passed","time":{"start":1744316549149,"stop":1744316549149,"duration":0}}]},"tags":[]},"source":"50cdab2cc4b77bd2.json","parameterValues":["{'data': Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       990, 991, 992, 993, 994, 995, 996, 997, 998, 999],\n      dtype='uint16', length=1000), 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"]}