{"uid":"d8e253b55ceb543b","name":"test_type_inference[parameters28]","fullName":"tests.unit.processing.test_type_conversion_utils#test_type_inference","historyId":"9ff3f0baed0deaa5c6f348c24243b62d","time":{"start":1744383515360,"stop":1744383515361,"duration":1},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"patch_all","time":{"start":1744383505005,"stop":1744383505005,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"caplog","time":{"start":1744383515359,"stop":1744383515359,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"caplog::0","time":{"start":1744383515361,"stop":1744383515361,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.processing"},{"name":"suite","value":"test_type_conversion_utils"},{"name":"host","value":"75723b7251fe"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.processing.test_type_conversion_utils"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"parameters","value":"{'data': Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       990, 991, 992, 993, 994, 995, 996, 997, 998, 999],\n      dtype='int64', length=1000), 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":10,"unknown":0,"total":10},"items":[{"uid":"52f49564a28faf3b","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23975//#testresult/52f49564a28faf3b","status":"passed","time":{"start":1744337376905,"stop":1744337376905,"duration":0}},{"uid":"aabf04df09ab3c7e","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23966//#testresult/aabf04df09ab3c7e","status":"passed","time":{"start":1744334800306,"stop":1744334800306,"duration":0}},{"uid":"b88fa8b39f670e3e","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23965//#testresult/b88fa8b39f670e3e","status":"passed","time":{"start":1744328197611,"stop":1744328197611,"duration":0}},{"uid":"bc109fb24a9da1b0","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23964//#testresult/bc109fb24a9da1b0","status":"passed","time":{"start":1744326572550,"stop":1744326572550,"duration":0}},{"uid":"fd8ca10df420bf68","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23961//#testresult/fd8ca10df420bf68","status":"passed","time":{"start":1744324473176,"stop":1744324473176,"duration":0}},{"uid":"464aaa94689748bb","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23954//#testresult/464aaa94689748bb","status":"passed","time":{"start":1744324189348,"stop":1744324189349,"duration":1}},{"uid":"a6cba007aeb260ce","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23951//#testresult/a6cba007aeb260ce","status":"passed","time":{"start":1744322847429,"stop":1744322847429,"duration":0}},{"uid":"ab12e44fabed8707","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23950//#testresult/ab12e44fabed8707","status":"passed","time":{"start":1744317734387,"stop":1744317734388,"duration":1}},{"uid":"f321d3d57f92c6e","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/23949//#testresult/f321d3d57f92c6e","status":"passed","time":{"start":1744316549206,"stop":1744316549206,"duration":0}}]},"tags":[]},"source":"d8e253b55ceb543b.json","parameterValues":["{'data': Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       990, 991, 992, 993, 994, 995, 996, 997, 998, 999],\n      dtype='int64', length=1000), 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"]}