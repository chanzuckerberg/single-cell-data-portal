{"uid":"3b0b052a17f930ef","name":"test_type_inference[parameters13]","fullName":"tests.unit.processing.test_type_conversion_utils#test_type_inference","historyId":"e3a07c89a2797e9b0ce1f70ecb5cbbb0","time":{"start":1720713742417,"stop":1720713742417,"duration":0},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"patch_all","time":{"start":1720713703895,"stop":1720713703895,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"caplog","time":{"start":1720713742416,"stop":1720713742416,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"caplog::0","time":{"start":1720713742417,"stop":1720713742417,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.processing"},{"name":"suite","value":"test_type_conversion_utils"},{"name":"host","value":"0ded4e3779f5"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.processing.test_type_conversion_utils"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"parameters","value":"{'data': <10x100 sparse matrix of type '<class 'numpy.int16'>'\n\twith 0 stored elements in Compressed Sparse Row format>, 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":10,"unknown":0,"total":10},"items":[{"uid":"d591b701c48d0fe","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21383//#testresult/d591b701c48d0fe","status":"passed","time":{"start":1720668473608,"stop":1720668473609,"duration":1}},{"uid":"322b2ec35d929e02","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21381//#testresult/322b2ec35d929e02","status":"passed","time":{"start":1720667368933,"stop":1720667368933,"duration":0}},{"uid":"dcb180339ef93f80","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21380//#testresult/dcb180339ef93f80","status":"passed","time":{"start":1720663187580,"stop":1720663187580,"duration":0}},{"uid":"e2802c4ca9afdb91","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21379//#testresult/e2802c4ca9afdb91","status":"passed","time":{"start":1720663113472,"stop":1720663113472,"duration":0}},{"uid":"8d804320c8ff4a8d","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21377//#testresult/8d804320c8ff4a8d","status":"passed","time":{"start":1720662780756,"stop":1720662780757,"duration":1}},{"uid":"97521608c34e38ae","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21376//#testresult/97521608c34e38ae","status":"passed","time":{"start":1720657324078,"stop":1720657324078,"duration":0}},{"uid":"e26fcb644438ecdc","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21375//#testresult/e26fcb644438ecdc","status":"passed","time":{"start":1720656981871,"stop":1720656981871,"duration":0}},{"uid":"6ce3d58046ddea29","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21373//#testresult/6ce3d58046ddea29","status":"passed","time":{"start":1720656033737,"stop":1720656033737,"duration":0}},{"uid":"2cfa662cf2108ee3","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21372//#testresult/2cfa662cf2108ee3","status":"passed","time":{"start":1720655800783,"stop":1720655800784,"duration":1}}]},"tags":[]},"source":"3b0b052a17f930ef.json","parameterValues":["{'data': <10x100 sparse matrix of type '<class 'numpy.int16'>'\n\twith 0 stored elements in Compressed Sparse Row format>, 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"]}