{"uid":"d96e80b5656fa1a1","name":"test_type_inference[parameters5]","fullName":"tests.unit.processing.test_type_conversion_utils#test_type_inference","historyId":"3332e2ba045f7bbdf5819fe313edfd74","time":{"start":1720713742379,"stop":1720713742379,"duration":0},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"patch_all","time":{"start":1720713703895,"stop":1720713703895,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"caplog","time":{"start":1720713742378,"stop":1720713742378,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"caplog::0","time":{"start":1720713742380,"stop":1720713742380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.processing"},{"name":"suite","value":"test_type_conversion_utils"},{"name":"host","value":"0ded4e3779f5"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.processing.test_type_conversion_utils"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"parameters","value":"{'data': <10x100 sparse matrix of type '<class 'numpy.int8'>'\n\twith 0 stored elements in Compressed Sparse Row format>, 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":10,"unknown":0,"total":10},"items":[{"uid":"622bf3aa8fad551e","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21383//#testresult/622bf3aa8fad551e","status":"passed","time":{"start":1720668473571,"stop":1720668473571,"duration":0}},{"uid":"a9d6495c9d77d5bb","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21381//#testresult/a9d6495c9d77d5bb","status":"passed","time":{"start":1720667368895,"stop":1720667368895,"duration":0}},{"uid":"cd117b88194c125","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21380//#testresult/cd117b88194c125","status":"passed","time":{"start":1720663187541,"stop":1720663187541,"duration":0}},{"uid":"4b056f7a5a439da6","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21379//#testresult/4b056f7a5a439da6","status":"passed","time":{"start":1720663113433,"stop":1720663113433,"duration":0}},{"uid":"9b49b56f91c717d2","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21377//#testresult/9b49b56f91c717d2","status":"passed","time":{"start":1720662780719,"stop":1720662780719,"duration":0}},{"uid":"f08420b4ee28e5c0","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21376//#testresult/f08420b4ee28e5c0","status":"passed","time":{"start":1720657324041,"stop":1720657324041,"duration":0}},{"uid":"8a26df410f89e132","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21375//#testresult/8a26df410f89e132","status":"passed","time":{"start":1720656981831,"stop":1720656981832,"duration":1}},{"uid":"e673501ccd6c9b24","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21373//#testresult/e673501ccd6c9b24","status":"passed","time":{"start":1720656033699,"stop":1720656033700,"duration":1}},{"uid":"461ca75f940ed70a","reportUrl":"https://chanzuckerberg.github.io/single-cell-data-portal/21372//#testresult/461ca75f940ed70a","status":"passed","time":{"start":1720655800746,"stop":1720655800746,"duration":0}}]},"tags":[]},"source":"d96e80b5656fa1a1.json","parameterValues":["{'data': <10x100 sparse matrix of type '<class 'numpy.int8'>'\n\twith 0 stored elements in Compressed Sparse Row format>, 'expected_encoding_dtype': <class 'numpy.int32'>, 'expected_schema_hint': {'type': 'int32'}}"]}